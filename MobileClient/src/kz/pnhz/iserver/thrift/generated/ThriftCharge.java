/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package kz.pnhz.iserver.thrift.generated;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.10.0)", date = "2017-10-15")
public class ThriftCharge implements org.apache.thrift.TBase<ThriftCharge, ThriftCharge._Fields>, java.io.Serializable, Cloneable, Comparable<ThriftCharge> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ThriftCharge");

  private static final org.apache.thrift.protocol.TField PERFORMERS_IDS_FIELD_DESC = new org.apache.thrift.protocol.TField("performersIds", org.apache.thrift.protocol.TType.LIST, (short)1);
  private static final org.apache.thrift.protocol.TField SUPERVISOR_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("supervisorId", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField TEXT_FIELD_DESC = new org.apache.thrift.protocol.TField("text", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField FINISH_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("finishDate", org.apache.thrift.protocol.TType.I64, (short)4);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new ThriftChargeStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new ThriftChargeTupleSchemeFactory();

  public java.util.List<java.lang.String> performersIds; // required
  public java.lang.String supervisorId; // required
  public java.lang.String text; // required
  public long finishDate; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    PERFORMERS_IDS((short)1, "performersIds"),
    SUPERVISOR_ID((short)2, "supervisorId"),
    TEXT((short)3, "text"),
    FINISH_DATE((short)4, "finishDate");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // PERFORMERS_IDS
          return PERFORMERS_IDS;
        case 2: // SUPERVISOR_ID
          return SUPERVISOR_ID;
        case 3: // TEXT
          return TEXT;
        case 4: // FINISH_DATE
          return FINISH_DATE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __FINISHDATE_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.PERFORMERS_IDS, new org.apache.thrift.meta_data.FieldMetaData("performersIds", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.SUPERVISOR_ID, new org.apache.thrift.meta_data.FieldMetaData("supervisorId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TEXT, new org.apache.thrift.meta_data.FieldMetaData("text", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.FINISH_DATE, new org.apache.thrift.meta_data.FieldMetaData("finishDate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ThriftCharge.class, metaDataMap);
  }

  public ThriftCharge() {
  }

  public ThriftCharge(
    java.util.List<java.lang.String> performersIds,
    java.lang.String supervisorId,
    java.lang.String text,
    long finishDate)
  {
    this();
    this.performersIds = performersIds;
    this.supervisorId = supervisorId;
    this.text = text;
    this.finishDate = finishDate;
    setFinishDateIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ThriftCharge(ThriftCharge other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetPerformersIds()) {
      java.util.List<java.lang.String> __this__performersIds = new java.util.ArrayList<java.lang.String>(other.performersIds);
      this.performersIds = __this__performersIds;
    }
    if (other.isSetSupervisorId()) {
      this.supervisorId = other.supervisorId;
    }
    if (other.isSetText()) {
      this.text = other.text;
    }
    this.finishDate = other.finishDate;
  }

  public ThriftCharge deepCopy() {
    return new ThriftCharge(this);
  }

  @Override
  public void clear() {
    this.performersIds = null;
    this.supervisorId = null;
    this.text = null;
    setFinishDateIsSet(false);
    this.finishDate = 0;
  }

  public int getPerformersIdsSize() {
    return (this.performersIds == null) ? 0 : this.performersIds.size();
  }

  public java.util.Iterator<java.lang.String> getPerformersIdsIterator() {
    return (this.performersIds == null) ? null : this.performersIds.iterator();
  }

  public void addToPerformersIds(java.lang.String elem) {
    if (this.performersIds == null) {
      this.performersIds = new java.util.ArrayList<java.lang.String>();
    }
    this.performersIds.add(elem);
  }

  public java.util.List<java.lang.String> getPerformersIds() {
    return this.performersIds;
  }

  public ThriftCharge setPerformersIds(java.util.List<java.lang.String> performersIds) {
    this.performersIds = performersIds;
    return this;
  }

  public void unsetPerformersIds() {
    this.performersIds = null;
  }

  /** Returns true if field performersIds is set (has been assigned a value) and false otherwise */
  public boolean isSetPerformersIds() {
    return this.performersIds != null;
  }

  public void setPerformersIdsIsSet(boolean value) {
    if (!value) {
      this.performersIds = null;
    }
  }

  public java.lang.String getSupervisorId() {
    return this.supervisorId;
  }

  public ThriftCharge setSupervisorId(java.lang.String supervisorId) {
    this.supervisorId = supervisorId;
    return this;
  }

  public void unsetSupervisorId() {
    this.supervisorId = null;
  }

  /** Returns true if field supervisorId is set (has been assigned a value) and false otherwise */
  public boolean isSetSupervisorId() {
    return this.supervisorId != null;
  }

  public void setSupervisorIdIsSet(boolean value) {
    if (!value) {
      this.supervisorId = null;
    }
  }

  public java.lang.String getText() {
    return this.text;
  }

  public ThriftCharge setText(java.lang.String text) {
    this.text = text;
    return this;
  }

  public void unsetText() {
    this.text = null;
  }

  /** Returns true if field text is set (has been assigned a value) and false otherwise */
  public boolean isSetText() {
    return this.text != null;
  }

  public void setTextIsSet(boolean value) {
    if (!value) {
      this.text = null;
    }
  }

  public long getFinishDate() {
    return this.finishDate;
  }

  public ThriftCharge setFinishDate(long finishDate) {
    this.finishDate = finishDate;
    setFinishDateIsSet(true);
    return this;
  }

  public void unsetFinishDate() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __FINISHDATE_ISSET_ID);
  }

  /** Returns true if field finishDate is set (has been assigned a value) and false otherwise */
  public boolean isSetFinishDate() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __FINISHDATE_ISSET_ID);
  }

  public void setFinishDateIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __FINISHDATE_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
    case PERFORMERS_IDS:
      if (value == null) {
        unsetPerformersIds();
      } else {
        setPerformersIds((java.util.List<java.lang.String>)value);
      }
      break;

    case SUPERVISOR_ID:
      if (value == null) {
        unsetSupervisorId();
      } else {
        setSupervisorId((java.lang.String)value);
      }
      break;

    case TEXT:
      if (value == null) {
        unsetText();
      } else {
        setText((java.lang.String)value);
      }
      break;

    case FINISH_DATE:
      if (value == null) {
        unsetFinishDate();
      } else {
        setFinishDate((java.lang.Long)value);
      }
      break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case PERFORMERS_IDS:
      return getPerformersIds();

    case SUPERVISOR_ID:
      return getSupervisorId();

    case TEXT:
      return getText();

    case FINISH_DATE:
      return getFinishDate();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case PERFORMERS_IDS:
      return isSetPerformersIds();
    case SUPERVISOR_ID:
      return isSetSupervisorId();
    case TEXT:
      return isSetText();
    case FINISH_DATE:
      return isSetFinishDate();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof ThriftCharge)
      return this.equals((ThriftCharge)that);
    return false;
  }

  public boolean equals(ThriftCharge that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_performersIds = true && this.isSetPerformersIds();
    boolean that_present_performersIds = true && that.isSetPerformersIds();
    if (this_present_performersIds || that_present_performersIds) {
      if (!(this_present_performersIds && that_present_performersIds))
        return false;
      if (!this.performersIds.equals(that.performersIds))
        return false;
    }

    boolean this_present_supervisorId = true && this.isSetSupervisorId();
    boolean that_present_supervisorId = true && that.isSetSupervisorId();
    if (this_present_supervisorId || that_present_supervisorId) {
      if (!(this_present_supervisorId && that_present_supervisorId))
        return false;
      if (!this.supervisorId.equals(that.supervisorId))
        return false;
    }

    boolean this_present_text = true && this.isSetText();
    boolean that_present_text = true && that.isSetText();
    if (this_present_text || that_present_text) {
      if (!(this_present_text && that_present_text))
        return false;
      if (!this.text.equals(that.text))
        return false;
    }

    boolean this_present_finishDate = true;
    boolean that_present_finishDate = true;
    if (this_present_finishDate || that_present_finishDate) {
      if (!(this_present_finishDate && that_present_finishDate))
        return false;
      if (this.finishDate != that.finishDate)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetPerformersIds()) ? 131071 : 524287);
    if (isSetPerformersIds())
      hashCode = hashCode * 8191 + performersIds.hashCode();

    hashCode = hashCode * 8191 + ((isSetSupervisorId()) ? 131071 : 524287);
    if (isSetSupervisorId())
      hashCode = hashCode * 8191 + supervisorId.hashCode();

    hashCode = hashCode * 8191 + ((isSetText()) ? 131071 : 524287);
    if (isSetText())
      hashCode = hashCode * 8191 + text.hashCode();

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(finishDate);

    return hashCode;
  }

  @Override
  public int compareTo(ThriftCharge other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetPerformersIds()).compareTo(other.isSetPerformersIds());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPerformersIds()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.performersIds, other.performersIds);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetSupervisorId()).compareTo(other.isSetSupervisorId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSupervisorId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.supervisorId, other.supervisorId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetText()).compareTo(other.isSetText());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetText()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.text, other.text);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetFinishDate()).compareTo(other.isSetFinishDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFinishDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.finishDate, other.finishDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("ThriftCharge(");
    boolean first = true;

    sb.append("performersIds:");
    if (this.performersIds == null) {
      sb.append("null");
    } else {
      sb.append(this.performersIds);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("supervisorId:");
    if (this.supervisorId == null) {
      sb.append("null");
    } else {
      sb.append(this.supervisorId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("text:");
    if (this.text == null) {
      sb.append("null");
    } else {
      sb.append(this.text);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("finishDate:");
    sb.append(this.finishDate);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ThriftChargeStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public ThriftChargeStandardScheme getScheme() {
      return new ThriftChargeStandardScheme();
    }
  }

  private static class ThriftChargeStandardScheme extends org.apache.thrift.scheme.StandardScheme<ThriftCharge> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ThriftCharge struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // PERFORMERS_IDS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list16 = iprot.readListBegin();
                struct.performersIds = new java.util.ArrayList<java.lang.String>(_list16.size);
                java.lang.String _elem17;
                for (int _i18 = 0; _i18 < _list16.size; ++_i18)
                {
                  _elem17 = iprot.readString();
                  struct.performersIds.add(_elem17);
                }
                iprot.readListEnd();
              }
              struct.setPerformersIdsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // SUPERVISOR_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.supervisorId = iprot.readString();
              struct.setSupervisorIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // TEXT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.text = iprot.readString();
              struct.setTextIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // FINISH_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.finishDate = iprot.readI64();
              struct.setFinishDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ThriftCharge struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.performersIds != null) {
        oprot.writeFieldBegin(PERFORMERS_IDS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.performersIds.size()));
          for (java.lang.String _iter19 : struct.performersIds)
          {
            oprot.writeString(_iter19);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.supervisorId != null) {
        oprot.writeFieldBegin(SUPERVISOR_ID_FIELD_DESC);
        oprot.writeString(struct.supervisorId);
        oprot.writeFieldEnd();
      }
      if (struct.text != null) {
        oprot.writeFieldBegin(TEXT_FIELD_DESC);
        oprot.writeString(struct.text);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(FINISH_DATE_FIELD_DESC);
      oprot.writeI64(struct.finishDate);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ThriftChargeTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public ThriftChargeTupleScheme getScheme() {
      return new ThriftChargeTupleScheme();
    }
  }

  private static class ThriftChargeTupleScheme extends org.apache.thrift.scheme.TupleScheme<ThriftCharge> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ThriftCharge struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetPerformersIds()) {
        optionals.set(0);
      }
      if (struct.isSetSupervisorId()) {
        optionals.set(1);
      }
      if (struct.isSetText()) {
        optionals.set(2);
      }
      if (struct.isSetFinishDate()) {
        optionals.set(3);
      }
      oprot.writeBitSet(optionals, 4);
      if (struct.isSetPerformersIds()) {
        {
          oprot.writeI32(struct.performersIds.size());
          for (java.lang.String _iter20 : struct.performersIds)
          {
            oprot.writeString(_iter20);
          }
        }
      }
      if (struct.isSetSupervisorId()) {
        oprot.writeString(struct.supervisorId);
      }
      if (struct.isSetText()) {
        oprot.writeString(struct.text);
      }
      if (struct.isSetFinishDate()) {
        oprot.writeI64(struct.finishDate);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ThriftCharge struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(4);
      if (incoming.get(0)) {
        {
          org.apache.thrift.protocol.TList _list21 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.performersIds = new java.util.ArrayList<java.lang.String>(_list21.size);
          java.lang.String _elem22;
          for (int _i23 = 0; _i23 < _list21.size; ++_i23)
          {
            _elem22 = iprot.readString();
            struct.performersIds.add(_elem22);
          }
        }
        struct.setPerformersIdsIsSet(true);
      }
      if (incoming.get(1)) {
        struct.supervisorId = iprot.readString();
        struct.setSupervisorIdIsSet(true);
      }
      if (incoming.get(2)) {
        struct.text = iprot.readString();
        struct.setTextIsSet(true);
      }
      if (incoming.get(3)) {
        struct.finishDate = iprot.readI64();
        struct.setFinishDateIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

