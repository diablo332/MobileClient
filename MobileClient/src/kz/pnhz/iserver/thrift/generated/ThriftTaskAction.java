/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package kz.pnhz.iserver.thrift.generated;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.10.0)", date = "2017-10-15")
public class ThriftTaskAction implements org.apache.thrift.TBase<ThriftTaskAction, ThriftTaskAction._Fields>, java.io.Serializable, Cloneable, Comparable<ThriftTaskAction> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ThriftTaskAction");

  private static final org.apache.thrift.protocol.TField ACTION_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("actionType", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField BUTTON_LABEL_FIELD_DESC = new org.apache.thrift.protocol.TField("buttonLabel", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField BUTTON_COLOR_FIELD_DESC = new org.apache.thrift.protocol.TField("buttonColor", org.apache.thrift.protocol.TType.STRUCT, (short)3);
  private static final org.apache.thrift.protocol.TField STANDARD_ACTION_DESCRIPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("standardActionDescription", org.apache.thrift.protocol.TType.STRUCT, (short)4);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new ThriftTaskActionStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new ThriftTaskActionTupleSchemeFactory();

  /**
   * 
   * @see ThriftActionType
   */
  public ThriftActionType actionType; // required
  public java.lang.String buttonLabel; // required
  public ThriftColor buttonColor; // required
  public ThriftStandardActionDescription standardActionDescription; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * 
     * @see ThriftActionType
     */
    ACTION_TYPE((short)1, "actionType"),
    BUTTON_LABEL((short)2, "buttonLabel"),
    BUTTON_COLOR((short)3, "buttonColor"),
    STANDARD_ACTION_DESCRIPTION((short)4, "standardActionDescription");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ACTION_TYPE
          return ACTION_TYPE;
        case 2: // BUTTON_LABEL
          return BUTTON_LABEL;
        case 3: // BUTTON_COLOR
          return BUTTON_COLOR;
        case 4: // STANDARD_ACTION_DESCRIPTION
          return STANDARD_ACTION_DESCRIPTION;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ACTION_TYPE, new org.apache.thrift.meta_data.FieldMetaData("actionType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, ThriftActionType.class)));
    tmpMap.put(_Fields.BUTTON_LABEL, new org.apache.thrift.meta_data.FieldMetaData("buttonLabel", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.BUTTON_COLOR, new org.apache.thrift.meta_data.FieldMetaData("buttonColor", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ThriftColor.class)));
    tmpMap.put(_Fields.STANDARD_ACTION_DESCRIPTION, new org.apache.thrift.meta_data.FieldMetaData("standardActionDescription", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ThriftStandardActionDescription.class)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ThriftTaskAction.class, metaDataMap);
  }

  public ThriftTaskAction() {
  }

  public ThriftTaskAction(
    ThriftActionType actionType,
    java.lang.String buttonLabel,
    ThriftColor buttonColor,
    ThriftStandardActionDescription standardActionDescription)
  {
    this();
    this.actionType = actionType;
    this.buttonLabel = buttonLabel;
    this.buttonColor = buttonColor;
    this.standardActionDescription = standardActionDescription;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ThriftTaskAction(ThriftTaskAction other) {
    if (other.isSetActionType()) {
      this.actionType = other.actionType;
    }
    if (other.isSetButtonLabel()) {
      this.buttonLabel = other.buttonLabel;
    }
    if (other.isSetButtonColor()) {
      this.buttonColor = new ThriftColor(other.buttonColor);
    }
    if (other.isSetStandardActionDescription()) {
      this.standardActionDescription = new ThriftStandardActionDescription(other.standardActionDescription);
    }
  }

  public ThriftTaskAction deepCopy() {
    return new ThriftTaskAction(this);
  }

  @Override
  public void clear() {
    this.actionType = null;
    this.buttonLabel = null;
    this.buttonColor = null;
    this.standardActionDescription = null;
  }

  /**
   * 
   * @see ThriftActionType
   */
  public ThriftActionType getActionType() {
    return this.actionType;
  }

  /**
   * 
   * @see ThriftActionType
   */
  public ThriftTaskAction setActionType(ThriftActionType actionType) {
    this.actionType = actionType;
    return this;
  }

  public void unsetActionType() {
    this.actionType = null;
  }

  /** Returns true if field actionType is set (has been assigned a value) and false otherwise */
  public boolean isSetActionType() {
    return this.actionType != null;
  }

  public void setActionTypeIsSet(boolean value) {
    if (!value) {
      this.actionType = null;
    }
  }

  public java.lang.String getButtonLabel() {
    return this.buttonLabel;
  }

  public ThriftTaskAction setButtonLabel(java.lang.String buttonLabel) {
    this.buttonLabel = buttonLabel;
    return this;
  }

  public void unsetButtonLabel() {
    this.buttonLabel = null;
  }

  /** Returns true if field buttonLabel is set (has been assigned a value) and false otherwise */
  public boolean isSetButtonLabel() {
    return this.buttonLabel != null;
  }

  public void setButtonLabelIsSet(boolean value) {
    if (!value) {
      this.buttonLabel = null;
    }
  }

  public ThriftColor getButtonColor() {
    return this.buttonColor;
  }

  public ThriftTaskAction setButtonColor(ThriftColor buttonColor) {
    this.buttonColor = buttonColor;
    return this;
  }

  public void unsetButtonColor() {
    this.buttonColor = null;
  }

  /** Returns true if field buttonColor is set (has been assigned a value) and false otherwise */
  public boolean isSetButtonColor() {
    return this.buttonColor != null;
  }

  public void setButtonColorIsSet(boolean value) {
    if (!value) {
      this.buttonColor = null;
    }
  }

  public ThriftStandardActionDescription getStandardActionDescription() {
    return this.standardActionDescription;
  }

  public ThriftTaskAction setStandardActionDescription(ThriftStandardActionDescription standardActionDescription) {
    this.standardActionDescription = standardActionDescription;
    return this;
  }

  public void unsetStandardActionDescription() {
    this.standardActionDescription = null;
  }

  /** Returns true if field standardActionDescription is set (has been assigned a value) and false otherwise */
  public boolean isSetStandardActionDescription() {
    return this.standardActionDescription != null;
  }

  public void setStandardActionDescriptionIsSet(boolean value) {
    if (!value) {
      this.standardActionDescription = null;
    }
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
    case ACTION_TYPE:
      if (value == null) {
        unsetActionType();
      } else {
        setActionType((ThriftActionType)value);
      }
      break;

    case BUTTON_LABEL:
      if (value == null) {
        unsetButtonLabel();
      } else {
        setButtonLabel((java.lang.String)value);
      }
      break;

    case BUTTON_COLOR:
      if (value == null) {
        unsetButtonColor();
      } else {
        setButtonColor((ThriftColor)value);
      }
      break;

    case STANDARD_ACTION_DESCRIPTION:
      if (value == null) {
        unsetStandardActionDescription();
      } else {
        setStandardActionDescription((ThriftStandardActionDescription)value);
      }
      break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case ACTION_TYPE:
      return getActionType();

    case BUTTON_LABEL:
      return getButtonLabel();

    case BUTTON_COLOR:
      return getButtonColor();

    case STANDARD_ACTION_DESCRIPTION:
      return getStandardActionDescription();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case ACTION_TYPE:
      return isSetActionType();
    case BUTTON_LABEL:
      return isSetButtonLabel();
    case BUTTON_COLOR:
      return isSetButtonColor();
    case STANDARD_ACTION_DESCRIPTION:
      return isSetStandardActionDescription();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof ThriftTaskAction)
      return this.equals((ThriftTaskAction)that);
    return false;
  }

  public boolean equals(ThriftTaskAction that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_actionType = true && this.isSetActionType();
    boolean that_present_actionType = true && that.isSetActionType();
    if (this_present_actionType || that_present_actionType) {
      if (!(this_present_actionType && that_present_actionType))
        return false;
      if (!this.actionType.equals(that.actionType))
        return false;
    }

    boolean this_present_buttonLabel = true && this.isSetButtonLabel();
    boolean that_present_buttonLabel = true && that.isSetButtonLabel();
    if (this_present_buttonLabel || that_present_buttonLabel) {
      if (!(this_present_buttonLabel && that_present_buttonLabel))
        return false;
      if (!this.buttonLabel.equals(that.buttonLabel))
        return false;
    }

    boolean this_present_buttonColor = true && this.isSetButtonColor();
    boolean that_present_buttonColor = true && that.isSetButtonColor();
    if (this_present_buttonColor || that_present_buttonColor) {
      if (!(this_present_buttonColor && that_present_buttonColor))
        return false;
      if (!this.buttonColor.equals(that.buttonColor))
        return false;
    }

    boolean this_present_standardActionDescription = true && this.isSetStandardActionDescription();
    boolean that_present_standardActionDescription = true && that.isSetStandardActionDescription();
    if (this_present_standardActionDescription || that_present_standardActionDescription) {
      if (!(this_present_standardActionDescription && that_present_standardActionDescription))
        return false;
      if (!this.standardActionDescription.equals(that.standardActionDescription))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetActionType()) ? 131071 : 524287);
    if (isSetActionType())
      hashCode = hashCode * 8191 + actionType.getValue();

    hashCode = hashCode * 8191 + ((isSetButtonLabel()) ? 131071 : 524287);
    if (isSetButtonLabel())
      hashCode = hashCode * 8191 + buttonLabel.hashCode();

    hashCode = hashCode * 8191 + ((isSetButtonColor()) ? 131071 : 524287);
    if (isSetButtonColor())
      hashCode = hashCode * 8191 + buttonColor.hashCode();

    hashCode = hashCode * 8191 + ((isSetStandardActionDescription()) ? 131071 : 524287);
    if (isSetStandardActionDescription())
      hashCode = hashCode * 8191 + standardActionDescription.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(ThriftTaskAction other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetActionType()).compareTo(other.isSetActionType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetActionType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.actionType, other.actionType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetButtonLabel()).compareTo(other.isSetButtonLabel());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetButtonLabel()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.buttonLabel, other.buttonLabel);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetButtonColor()).compareTo(other.isSetButtonColor());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetButtonColor()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.buttonColor, other.buttonColor);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetStandardActionDescription()).compareTo(other.isSetStandardActionDescription());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStandardActionDescription()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.standardActionDescription, other.standardActionDescription);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("ThriftTaskAction(");
    boolean first = true;

    sb.append("actionType:");
    if (this.actionType == null) {
      sb.append("null");
    } else {
      sb.append(this.actionType);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("buttonLabel:");
    if (this.buttonLabel == null) {
      sb.append("null");
    } else {
      sb.append(this.buttonLabel);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("buttonColor:");
    if (this.buttonColor == null) {
      sb.append("null");
    } else {
      sb.append(this.buttonColor);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("standardActionDescription:");
    if (this.standardActionDescription == null) {
      sb.append("null");
    } else {
      sb.append(this.standardActionDescription);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (buttonColor != null) {
      buttonColor.validate();
    }
    if (standardActionDescription != null) {
      standardActionDescription.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ThriftTaskActionStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public ThriftTaskActionStandardScheme getScheme() {
      return new ThriftTaskActionStandardScheme();
    }
  }

  private static class ThriftTaskActionStandardScheme extends org.apache.thrift.scheme.StandardScheme<ThriftTaskAction> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ThriftTaskAction struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ACTION_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.actionType = kz.pnhz.iserver.thrift.generated.ThriftActionType.findByValue(iprot.readI32());
              struct.setActionTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // BUTTON_LABEL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.buttonLabel = iprot.readString();
              struct.setButtonLabelIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // BUTTON_COLOR
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.buttonColor = new ThriftColor();
              struct.buttonColor.read(iprot);
              struct.setButtonColorIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // STANDARD_ACTION_DESCRIPTION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.standardActionDescription = new ThriftStandardActionDescription();
              struct.standardActionDescription.read(iprot);
              struct.setStandardActionDescriptionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ThriftTaskAction struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.actionType != null) {
        oprot.writeFieldBegin(ACTION_TYPE_FIELD_DESC);
        oprot.writeI32(struct.actionType.getValue());
        oprot.writeFieldEnd();
      }
      if (struct.buttonLabel != null) {
        oprot.writeFieldBegin(BUTTON_LABEL_FIELD_DESC);
        oprot.writeString(struct.buttonLabel);
        oprot.writeFieldEnd();
      }
      if (struct.buttonColor != null) {
        oprot.writeFieldBegin(BUTTON_COLOR_FIELD_DESC);
        struct.buttonColor.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.standardActionDescription != null) {
        oprot.writeFieldBegin(STANDARD_ACTION_DESCRIPTION_FIELD_DESC);
        struct.standardActionDescription.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ThriftTaskActionTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public ThriftTaskActionTupleScheme getScheme() {
      return new ThriftTaskActionTupleScheme();
    }
  }

  private static class ThriftTaskActionTupleScheme extends org.apache.thrift.scheme.TupleScheme<ThriftTaskAction> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ThriftTaskAction struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetActionType()) {
        optionals.set(0);
      }
      if (struct.isSetButtonLabel()) {
        optionals.set(1);
      }
      if (struct.isSetButtonColor()) {
        optionals.set(2);
      }
      if (struct.isSetStandardActionDescription()) {
        optionals.set(3);
      }
      oprot.writeBitSet(optionals, 4);
      if (struct.isSetActionType()) {
        oprot.writeI32(struct.actionType.getValue());
      }
      if (struct.isSetButtonLabel()) {
        oprot.writeString(struct.buttonLabel);
      }
      if (struct.isSetButtonColor()) {
        struct.buttonColor.write(oprot);
      }
      if (struct.isSetStandardActionDescription()) {
        struct.standardActionDescription.write(oprot);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ThriftTaskAction struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(4);
      if (incoming.get(0)) {
        struct.actionType = kz.pnhz.iserver.thrift.generated.ThriftActionType.findByValue(iprot.readI32());
        struct.setActionTypeIsSet(true);
      }
      if (incoming.get(1)) {
        struct.buttonLabel = iprot.readString();
        struct.setButtonLabelIsSet(true);
      }
      if (incoming.get(2)) {
        struct.buttonColor = new ThriftColor();
        struct.buttonColor.read(iprot);
        struct.setButtonColorIsSet(true);
      }
      if (incoming.get(3)) {
        struct.standardActionDescription = new ThriftStandardActionDescription();
        struct.standardActionDescription.read(iprot);
        struct.setStandardActionDescriptionIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

