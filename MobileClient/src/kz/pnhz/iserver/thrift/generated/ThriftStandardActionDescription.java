/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package kz.pnhz.iserver.thrift.generated;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.10.0)", date = "2017-10-15")
public class ThriftStandardActionDescription implements org.apache.thrift.TBase<ThriftStandardActionDescription, ThriftStandardActionDescription._Fields>, java.io.Serializable, Cloneable, Comparable<ThriftStandardActionDescription> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ThriftStandardActionDescription");

  private static final org.apache.thrift.protocol.TField TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("type", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField ACTION_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("actionCode", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField COMMENT_PROMPT_FIELD_DESC = new org.apache.thrift.protocol.TField("commentPrompt", org.apache.thrift.protocol.TType.STRING, (short)3);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new ThriftStandardActionDescriptionStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new ThriftStandardActionDescriptionTupleSchemeFactory();

  /**
   * 
   * @see ThriftStandardActionType
   */
  public ThriftStandardActionType type; // required
  public java.lang.String actionCode; // required
  public java.lang.String commentPrompt; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * 
     * @see ThriftStandardActionType
     */
    TYPE((short)1, "type"),
    ACTION_CODE((short)2, "actionCode"),
    COMMENT_PROMPT((short)3, "commentPrompt");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // TYPE
          return TYPE;
        case 2: // ACTION_CODE
          return ACTION_CODE;
        case 3: // COMMENT_PROMPT
          return COMMENT_PROMPT;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.TYPE, new org.apache.thrift.meta_data.FieldMetaData("type", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, ThriftStandardActionType.class)));
    tmpMap.put(_Fields.ACTION_CODE, new org.apache.thrift.meta_data.FieldMetaData("actionCode", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.COMMENT_PROMPT, new org.apache.thrift.meta_data.FieldMetaData("commentPrompt", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ThriftStandardActionDescription.class, metaDataMap);
  }

  public ThriftStandardActionDescription() {
  }

  public ThriftStandardActionDescription(
    ThriftStandardActionType type,
    java.lang.String actionCode,
    java.lang.String commentPrompt)
  {
    this();
    this.type = type;
    this.actionCode = actionCode;
    this.commentPrompt = commentPrompt;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ThriftStandardActionDescription(ThriftStandardActionDescription other) {
    if (other.isSetType()) {
      this.type = other.type;
    }
    if (other.isSetActionCode()) {
      this.actionCode = other.actionCode;
    }
    if (other.isSetCommentPrompt()) {
      this.commentPrompt = other.commentPrompt;
    }
  }

  public ThriftStandardActionDescription deepCopy() {
    return new ThriftStandardActionDescription(this);
  }

  @Override
  public void clear() {
    this.type = null;
    this.actionCode = null;
    this.commentPrompt = null;
  }

  /**
   * 
   * @see ThriftStandardActionType
   */
  public ThriftStandardActionType getType() {
    return this.type;
  }

  /**
   * 
   * @see ThriftStandardActionType
   */
  public ThriftStandardActionDescription setType(ThriftStandardActionType type) {
    this.type = type;
    return this;
  }

  public void unsetType() {
    this.type = null;
  }

  /** Returns true if field type is set (has been assigned a value) and false otherwise */
  public boolean isSetType() {
    return this.type != null;
  }

  public void setTypeIsSet(boolean value) {
    if (!value) {
      this.type = null;
    }
  }

  public java.lang.String getActionCode() {
    return this.actionCode;
  }

  public ThriftStandardActionDescription setActionCode(java.lang.String actionCode) {
    this.actionCode = actionCode;
    return this;
  }

  public void unsetActionCode() {
    this.actionCode = null;
  }

  /** Returns true if field actionCode is set (has been assigned a value) and false otherwise */
  public boolean isSetActionCode() {
    return this.actionCode != null;
  }

  public void setActionCodeIsSet(boolean value) {
    if (!value) {
      this.actionCode = null;
    }
  }

  public java.lang.String getCommentPrompt() {
    return this.commentPrompt;
  }

  public ThriftStandardActionDescription setCommentPrompt(java.lang.String commentPrompt) {
    this.commentPrompt = commentPrompt;
    return this;
  }

  public void unsetCommentPrompt() {
    this.commentPrompt = null;
  }

  /** Returns true if field commentPrompt is set (has been assigned a value) and false otherwise */
  public boolean isSetCommentPrompt() {
    return this.commentPrompt != null;
  }

  public void setCommentPromptIsSet(boolean value) {
    if (!value) {
      this.commentPrompt = null;
    }
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
    case TYPE:
      if (value == null) {
        unsetType();
      } else {
        setType((ThriftStandardActionType)value);
      }
      break;

    case ACTION_CODE:
      if (value == null) {
        unsetActionCode();
      } else {
        setActionCode((java.lang.String)value);
      }
      break;

    case COMMENT_PROMPT:
      if (value == null) {
        unsetCommentPrompt();
      } else {
        setCommentPrompt((java.lang.String)value);
      }
      break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case TYPE:
      return getType();

    case ACTION_CODE:
      return getActionCode();

    case COMMENT_PROMPT:
      return getCommentPrompt();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case TYPE:
      return isSetType();
    case ACTION_CODE:
      return isSetActionCode();
    case COMMENT_PROMPT:
      return isSetCommentPrompt();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof ThriftStandardActionDescription)
      return this.equals((ThriftStandardActionDescription)that);
    return false;
  }

  public boolean equals(ThriftStandardActionDescription that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_type = true && this.isSetType();
    boolean that_present_type = true && that.isSetType();
    if (this_present_type || that_present_type) {
      if (!(this_present_type && that_present_type))
        return false;
      if (!this.type.equals(that.type))
        return false;
    }

    boolean this_present_actionCode = true && this.isSetActionCode();
    boolean that_present_actionCode = true && that.isSetActionCode();
    if (this_present_actionCode || that_present_actionCode) {
      if (!(this_present_actionCode && that_present_actionCode))
        return false;
      if (!this.actionCode.equals(that.actionCode))
        return false;
    }

    boolean this_present_commentPrompt = true && this.isSetCommentPrompt();
    boolean that_present_commentPrompt = true && that.isSetCommentPrompt();
    if (this_present_commentPrompt || that_present_commentPrompt) {
      if (!(this_present_commentPrompt && that_present_commentPrompt))
        return false;
      if (!this.commentPrompt.equals(that.commentPrompt))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetType()) ? 131071 : 524287);
    if (isSetType())
      hashCode = hashCode * 8191 + type.getValue();

    hashCode = hashCode * 8191 + ((isSetActionCode()) ? 131071 : 524287);
    if (isSetActionCode())
      hashCode = hashCode * 8191 + actionCode.hashCode();

    hashCode = hashCode * 8191 + ((isSetCommentPrompt()) ? 131071 : 524287);
    if (isSetCommentPrompt())
      hashCode = hashCode * 8191 + commentPrompt.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(ThriftStandardActionDescription other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetType()).compareTo(other.isSetType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.type, other.type);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetActionCode()).compareTo(other.isSetActionCode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetActionCode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.actionCode, other.actionCode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetCommentPrompt()).compareTo(other.isSetCommentPrompt());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCommentPrompt()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.commentPrompt, other.commentPrompt);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("ThriftStandardActionDescription(");
    boolean first = true;

    sb.append("type:");
    if (this.type == null) {
      sb.append("null");
    } else {
      sb.append(this.type);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("actionCode:");
    if (this.actionCode == null) {
      sb.append("null");
    } else {
      sb.append(this.actionCode);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("commentPrompt:");
    if (this.commentPrompt == null) {
      sb.append("null");
    } else {
      sb.append(this.commentPrompt);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ThriftStandardActionDescriptionStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public ThriftStandardActionDescriptionStandardScheme getScheme() {
      return new ThriftStandardActionDescriptionStandardScheme();
    }
  }

  private static class ThriftStandardActionDescriptionStandardScheme extends org.apache.thrift.scheme.StandardScheme<ThriftStandardActionDescription> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ThriftStandardActionDescription struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.type = kz.pnhz.iserver.thrift.generated.ThriftStandardActionType.findByValue(iprot.readI32());
              struct.setTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // ACTION_CODE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.actionCode = iprot.readString();
              struct.setActionCodeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // COMMENT_PROMPT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.commentPrompt = iprot.readString();
              struct.setCommentPromptIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ThriftStandardActionDescription struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.type != null) {
        oprot.writeFieldBegin(TYPE_FIELD_DESC);
        oprot.writeI32(struct.type.getValue());
        oprot.writeFieldEnd();
      }
      if (struct.actionCode != null) {
        oprot.writeFieldBegin(ACTION_CODE_FIELD_DESC);
        oprot.writeString(struct.actionCode);
        oprot.writeFieldEnd();
      }
      if (struct.commentPrompt != null) {
        oprot.writeFieldBegin(COMMENT_PROMPT_FIELD_DESC);
        oprot.writeString(struct.commentPrompt);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ThriftStandardActionDescriptionTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public ThriftStandardActionDescriptionTupleScheme getScheme() {
      return new ThriftStandardActionDescriptionTupleScheme();
    }
  }

  private static class ThriftStandardActionDescriptionTupleScheme extends org.apache.thrift.scheme.TupleScheme<ThriftStandardActionDescription> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ThriftStandardActionDescription struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetType()) {
        optionals.set(0);
      }
      if (struct.isSetActionCode()) {
        optionals.set(1);
      }
      if (struct.isSetCommentPrompt()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.isSetType()) {
        oprot.writeI32(struct.type.getValue());
      }
      if (struct.isSetActionCode()) {
        oprot.writeString(struct.actionCode);
      }
      if (struct.isSetCommentPrompt()) {
        oprot.writeString(struct.commentPrompt);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ThriftStandardActionDescription struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        struct.type = kz.pnhz.iserver.thrift.generated.ThriftStandardActionType.findByValue(iprot.readI32());
        struct.setTypeIsSet(true);
      }
      if (incoming.get(1)) {
        struct.actionCode = iprot.readString();
        struct.setActionCodeIsSet(true);
      }
      if (incoming.get(2)) {
        struct.commentPrompt = iprot.readString();
        struct.setCommentPromptIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

