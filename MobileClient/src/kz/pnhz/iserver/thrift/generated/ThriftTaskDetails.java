/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package kz.pnhz.iserver.thrift.generated;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.10.0)", date = "2017-10-15")
public class ThriftTaskDetails implements org.apache.thrift.TBase<ThriftTaskDetails, ThriftTaskDetails._Fields>, java.io.Serializable, Cloneable, Comparable<ThriftTaskDetails> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ThriftTaskDetails");

  private static final org.apache.thrift.protocol.TField TASK_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("taskName", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField DOCUMENT_TITLE_FIELD_DESC = new org.apache.thrift.protocol.TField("documentTitle", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField DOCUMENT_REG_NUMBER_FIELD_DESC = new org.apache.thrift.protocol.TField("documentRegNumber", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField INITIATOR_FIO_FIELD_DESC = new org.apache.thrift.protocol.TField("initiatorFio", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField DOCUMENT_KIND_FIELD_DESC = new org.apache.thrift.protocol.TField("documentKind", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField CAN_BE_REJECTED_FIELD_DESC = new org.apache.thrift.protocol.TField("canBeRejected", org.apache.thrift.protocol.TType.BOOL, (short)6);
  private static final org.apache.thrift.protocol.TField CARD_HTML_URL_FIELD_DESC = new org.apache.thrift.protocol.TField("cardHtmlUrl", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField CONTENTS_FIELD_DESC = new org.apache.thrift.protocol.TField("contents", org.apache.thrift.protocol.TType.LIST, (short)8);
  private static final org.apache.thrift.protocol.TField DATE_SENT_FIELD_DESC = new org.apache.thrift.protocol.TField("dateSent", org.apache.thrift.protocol.TType.I64, (short)9);
  private static final org.apache.thrift.protocol.TField TASK_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("taskType", org.apache.thrift.protocol.TType.I32, (short)10);
  private static final org.apache.thrift.protocol.TField DOC_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("docType", org.apache.thrift.protocol.TType.I32, (short)11);
  private static final org.apache.thrift.protocol.TField ACTIONS_FIELD_DESC = new org.apache.thrift.protocol.TField("actions", org.apache.thrift.protocol.TType.LIST, (short)12);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new ThriftTaskDetailsStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new ThriftTaskDetailsTupleSchemeFactory();

  public java.lang.String taskName; // required
  public java.lang.String documentTitle; // required
  public java.lang.String documentRegNumber; // required
  public java.lang.String initiatorFio; // required
  public java.lang.String documentKind; // required
  public boolean canBeRejected; // required
  public java.lang.String cardHtmlUrl; // required
  public java.util.List<ThriftDocumentContent> contents; // required
  public long dateSent; // required
  /**
   * 
   * @see ThriftTaskType
   */
  public ThriftTaskType taskType; // required
  /**
   * 
   * @see ThriftDocumentType
   */
  public ThriftDocumentType docType; // required
  public java.util.List<ThriftTaskAction> actions; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    TASK_NAME((short)1, "taskName"),
    DOCUMENT_TITLE((short)2, "documentTitle"),
    DOCUMENT_REG_NUMBER((short)3, "documentRegNumber"),
    INITIATOR_FIO((short)4, "initiatorFio"),
    DOCUMENT_KIND((short)5, "documentKind"),
    CAN_BE_REJECTED((short)6, "canBeRejected"),
    CARD_HTML_URL((short)7, "cardHtmlUrl"),
    CONTENTS((short)8, "contents"),
    DATE_SENT((short)9, "dateSent"),
    /**
     * 
     * @see ThriftTaskType
     */
    TASK_TYPE((short)10, "taskType"),
    /**
     * 
     * @see ThriftDocumentType
     */
    DOC_TYPE((short)11, "docType"),
    ACTIONS((short)12, "actions");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // TASK_NAME
          return TASK_NAME;
        case 2: // DOCUMENT_TITLE
          return DOCUMENT_TITLE;
        case 3: // DOCUMENT_REG_NUMBER
          return DOCUMENT_REG_NUMBER;
        case 4: // INITIATOR_FIO
          return INITIATOR_FIO;
        case 5: // DOCUMENT_KIND
          return DOCUMENT_KIND;
        case 6: // CAN_BE_REJECTED
          return CAN_BE_REJECTED;
        case 7: // CARD_HTML_URL
          return CARD_HTML_URL;
        case 8: // CONTENTS
          return CONTENTS;
        case 9: // DATE_SENT
          return DATE_SENT;
        case 10: // TASK_TYPE
          return TASK_TYPE;
        case 11: // DOC_TYPE
          return DOC_TYPE;
        case 12: // ACTIONS
          return ACTIONS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __CANBEREJECTED_ISSET_ID = 0;
  private static final int __DATESENT_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.TASK_NAME, new org.apache.thrift.meta_data.FieldMetaData("taskName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DOCUMENT_TITLE, new org.apache.thrift.meta_data.FieldMetaData("documentTitle", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DOCUMENT_REG_NUMBER, new org.apache.thrift.meta_data.FieldMetaData("documentRegNumber", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.INITIATOR_FIO, new org.apache.thrift.meta_data.FieldMetaData("initiatorFio", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DOCUMENT_KIND, new org.apache.thrift.meta_data.FieldMetaData("documentKind", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CAN_BE_REJECTED, new org.apache.thrift.meta_data.FieldMetaData("canBeRejected", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.CARD_HTML_URL, new org.apache.thrift.meta_data.FieldMetaData("cardHtmlUrl", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CONTENTS, new org.apache.thrift.meta_data.FieldMetaData("contents", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ThriftDocumentContent.class))));
    tmpMap.put(_Fields.DATE_SENT, new org.apache.thrift.meta_data.FieldMetaData("dateSent", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.TASK_TYPE, new org.apache.thrift.meta_data.FieldMetaData("taskType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, ThriftTaskType.class)));
    tmpMap.put(_Fields.DOC_TYPE, new org.apache.thrift.meta_data.FieldMetaData("docType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, ThriftDocumentType.class)));
    tmpMap.put(_Fields.ACTIONS, new org.apache.thrift.meta_data.FieldMetaData("actions", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ThriftTaskAction.class))));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ThriftTaskDetails.class, metaDataMap);
  }

  public ThriftTaskDetails() {
  }

  public ThriftTaskDetails(
    java.lang.String taskName,
    java.lang.String documentTitle,
    java.lang.String documentRegNumber,
    java.lang.String initiatorFio,
    java.lang.String documentKind,
    boolean canBeRejected,
    java.lang.String cardHtmlUrl,
    java.util.List<ThriftDocumentContent> contents,
    long dateSent,
    ThriftTaskType taskType,
    ThriftDocumentType docType,
    java.util.List<ThriftTaskAction> actions)
  {
    this();
    this.taskName = taskName;
    this.documentTitle = documentTitle;
    this.documentRegNumber = documentRegNumber;
    this.initiatorFio = initiatorFio;
    this.documentKind = documentKind;
    this.canBeRejected = canBeRejected;
    setCanBeRejectedIsSet(true);
    this.cardHtmlUrl = cardHtmlUrl;
    this.contents = contents;
    this.dateSent = dateSent;
    setDateSentIsSet(true);
    this.taskType = taskType;
    this.docType = docType;
    this.actions = actions;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ThriftTaskDetails(ThriftTaskDetails other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetTaskName()) {
      this.taskName = other.taskName;
    }
    if (other.isSetDocumentTitle()) {
      this.documentTitle = other.documentTitle;
    }
    if (other.isSetDocumentRegNumber()) {
      this.documentRegNumber = other.documentRegNumber;
    }
    if (other.isSetInitiatorFio()) {
      this.initiatorFio = other.initiatorFio;
    }
    if (other.isSetDocumentKind()) {
      this.documentKind = other.documentKind;
    }
    this.canBeRejected = other.canBeRejected;
    if (other.isSetCardHtmlUrl()) {
      this.cardHtmlUrl = other.cardHtmlUrl;
    }
    if (other.isSetContents()) {
      java.util.List<ThriftDocumentContent> __this__contents = new java.util.ArrayList<ThriftDocumentContent>(other.contents.size());
      for (ThriftDocumentContent other_element : other.contents) {
        __this__contents.add(new ThriftDocumentContent(other_element));
      }
      this.contents = __this__contents;
    }
    this.dateSent = other.dateSent;
    if (other.isSetTaskType()) {
      this.taskType = other.taskType;
    }
    if (other.isSetDocType()) {
      this.docType = other.docType;
    }
    if (other.isSetActions()) {
      java.util.List<ThriftTaskAction> __this__actions = new java.util.ArrayList<ThriftTaskAction>(other.actions.size());
      for (ThriftTaskAction other_element : other.actions) {
        __this__actions.add(new ThriftTaskAction(other_element));
      }
      this.actions = __this__actions;
    }
  }

  public ThriftTaskDetails deepCopy() {
    return new ThriftTaskDetails(this);
  }

  @Override
  public void clear() {
    this.taskName = null;
    this.documentTitle = null;
    this.documentRegNumber = null;
    this.initiatorFio = null;
    this.documentKind = null;
    setCanBeRejectedIsSet(false);
    this.canBeRejected = false;
    this.cardHtmlUrl = null;
    this.contents = null;
    setDateSentIsSet(false);
    this.dateSent = 0;
    this.taskType = null;
    this.docType = null;
    this.actions = null;
  }

  public java.lang.String getTaskName() {
    return this.taskName;
  }

  public ThriftTaskDetails setTaskName(java.lang.String taskName) {
    this.taskName = taskName;
    return this;
  }

  public void unsetTaskName() {
    this.taskName = null;
  }

  /** Returns true if field taskName is set (has been assigned a value) and false otherwise */
  public boolean isSetTaskName() {
    return this.taskName != null;
  }

  public void setTaskNameIsSet(boolean value) {
    if (!value) {
      this.taskName = null;
    }
  }

  public java.lang.String getDocumentTitle() {
    return this.documentTitle;
  }

  public ThriftTaskDetails setDocumentTitle(java.lang.String documentTitle) {
    this.documentTitle = documentTitle;
    return this;
  }

  public void unsetDocumentTitle() {
    this.documentTitle = null;
  }

  /** Returns true if field documentTitle is set (has been assigned a value) and false otherwise */
  public boolean isSetDocumentTitle() {
    return this.documentTitle != null;
  }

  public void setDocumentTitleIsSet(boolean value) {
    if (!value) {
      this.documentTitle = null;
    }
  }

  public java.lang.String getDocumentRegNumber() {
    return this.documentRegNumber;
  }

  public ThriftTaskDetails setDocumentRegNumber(java.lang.String documentRegNumber) {
    this.documentRegNumber = documentRegNumber;
    return this;
  }

  public void unsetDocumentRegNumber() {
    this.documentRegNumber = null;
  }

  /** Returns true if field documentRegNumber is set (has been assigned a value) and false otherwise */
  public boolean isSetDocumentRegNumber() {
    return this.documentRegNumber != null;
  }

  public void setDocumentRegNumberIsSet(boolean value) {
    if (!value) {
      this.documentRegNumber = null;
    }
  }

  public java.lang.String getInitiatorFio() {
    return this.initiatorFio;
  }

  public ThriftTaskDetails setInitiatorFio(java.lang.String initiatorFio) {
    this.initiatorFio = initiatorFio;
    return this;
  }

  public void unsetInitiatorFio() {
    this.initiatorFio = null;
  }

  /** Returns true if field initiatorFio is set (has been assigned a value) and false otherwise */
  public boolean isSetInitiatorFio() {
    return this.initiatorFio != null;
  }

  public void setInitiatorFioIsSet(boolean value) {
    if (!value) {
      this.initiatorFio = null;
    }
  }

  public java.lang.String getDocumentKind() {
    return this.documentKind;
  }

  public ThriftTaskDetails setDocumentKind(java.lang.String documentKind) {
    this.documentKind = documentKind;
    return this;
  }

  public void unsetDocumentKind() {
    this.documentKind = null;
  }

  /** Returns true if field documentKind is set (has been assigned a value) and false otherwise */
  public boolean isSetDocumentKind() {
    return this.documentKind != null;
  }

  public void setDocumentKindIsSet(boolean value) {
    if (!value) {
      this.documentKind = null;
    }
  }

  public boolean isCanBeRejected() {
    return this.canBeRejected;
  }

  public ThriftTaskDetails setCanBeRejected(boolean canBeRejected) {
    this.canBeRejected = canBeRejected;
    setCanBeRejectedIsSet(true);
    return this;
  }

  public void unsetCanBeRejected() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __CANBEREJECTED_ISSET_ID);
  }

  /** Returns true if field canBeRejected is set (has been assigned a value) and false otherwise */
  public boolean isSetCanBeRejected() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __CANBEREJECTED_ISSET_ID);
  }

  public void setCanBeRejectedIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __CANBEREJECTED_ISSET_ID, value);
  }

  public java.lang.String getCardHtmlUrl() {
    return this.cardHtmlUrl;
  }

  public ThriftTaskDetails setCardHtmlUrl(java.lang.String cardHtmlUrl) {
    this.cardHtmlUrl = cardHtmlUrl;
    return this;
  }

  public void unsetCardHtmlUrl() {
    this.cardHtmlUrl = null;
  }

  /** Returns true if field cardHtmlUrl is set (has been assigned a value) and false otherwise */
  public boolean isSetCardHtmlUrl() {
    return this.cardHtmlUrl != null;
  }

  public void setCardHtmlUrlIsSet(boolean value) {
    if (!value) {
      this.cardHtmlUrl = null;
    }
  }

  public int getContentsSize() {
    return (this.contents == null) ? 0 : this.contents.size();
  }

  public java.util.Iterator<ThriftDocumentContent> getContentsIterator() {
    return (this.contents == null) ? null : this.contents.iterator();
  }

  public void addToContents(ThriftDocumentContent elem) {
    if (this.contents == null) {
      this.contents = new java.util.ArrayList<ThriftDocumentContent>();
    }
    this.contents.add(elem);
  }

  public java.util.List<ThriftDocumentContent> getContents() {
    return this.contents;
  }

  public ThriftTaskDetails setContents(java.util.List<ThriftDocumentContent> contents) {
    this.contents = contents;
    return this;
  }

  public void unsetContents() {
    this.contents = null;
  }

  /** Returns true if field contents is set (has been assigned a value) and false otherwise */
  public boolean isSetContents() {
    return this.contents != null;
  }

  public void setContentsIsSet(boolean value) {
    if (!value) {
      this.contents = null;
    }
  }

  public long getDateSent() {
    return this.dateSent;
  }

  public ThriftTaskDetails setDateSent(long dateSent) {
    this.dateSent = dateSent;
    setDateSentIsSet(true);
    return this;
  }

  public void unsetDateSent() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __DATESENT_ISSET_ID);
  }

  /** Returns true if field dateSent is set (has been assigned a value) and false otherwise */
  public boolean isSetDateSent() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __DATESENT_ISSET_ID);
  }

  public void setDateSentIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __DATESENT_ISSET_ID, value);
  }

  /**
   * 
   * @see ThriftTaskType
   */
  public ThriftTaskType getTaskType() {
    return this.taskType;
  }

  /**
   * 
   * @see ThriftTaskType
   */
  public ThriftTaskDetails setTaskType(ThriftTaskType taskType) {
    this.taskType = taskType;
    return this;
  }

  public void unsetTaskType() {
    this.taskType = null;
  }

  /** Returns true if field taskType is set (has been assigned a value) and false otherwise */
  public boolean isSetTaskType() {
    return this.taskType != null;
  }

  public void setTaskTypeIsSet(boolean value) {
    if (!value) {
      this.taskType = null;
    }
  }

  /**
   * 
   * @see ThriftDocumentType
   */
  public ThriftDocumentType getDocType() {
    return this.docType;
  }

  /**
   * 
   * @see ThriftDocumentType
   */
  public ThriftTaskDetails setDocType(ThriftDocumentType docType) {
    this.docType = docType;
    return this;
  }

  public void unsetDocType() {
    this.docType = null;
  }

  /** Returns true if field docType is set (has been assigned a value) and false otherwise */
  public boolean isSetDocType() {
    return this.docType != null;
  }

  public void setDocTypeIsSet(boolean value) {
    if (!value) {
      this.docType = null;
    }
  }

  public int getActionsSize() {
    return (this.actions == null) ? 0 : this.actions.size();
  }

  public java.util.Iterator<ThriftTaskAction> getActionsIterator() {
    return (this.actions == null) ? null : this.actions.iterator();
  }

  public void addToActions(ThriftTaskAction elem) {
    if (this.actions == null) {
      this.actions = new java.util.ArrayList<ThriftTaskAction>();
    }
    this.actions.add(elem);
  }

  public java.util.List<ThriftTaskAction> getActions() {
    return this.actions;
  }

  public ThriftTaskDetails setActions(java.util.List<ThriftTaskAction> actions) {
    this.actions = actions;
    return this;
  }

  public void unsetActions() {
    this.actions = null;
  }

  /** Returns true if field actions is set (has been assigned a value) and false otherwise */
  public boolean isSetActions() {
    return this.actions != null;
  }

  public void setActionsIsSet(boolean value) {
    if (!value) {
      this.actions = null;
    }
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
    case TASK_NAME:
      if (value == null) {
        unsetTaskName();
      } else {
        setTaskName((java.lang.String)value);
      }
      break;

    case DOCUMENT_TITLE:
      if (value == null) {
        unsetDocumentTitle();
      } else {
        setDocumentTitle((java.lang.String)value);
      }
      break;

    case DOCUMENT_REG_NUMBER:
      if (value == null) {
        unsetDocumentRegNumber();
      } else {
        setDocumentRegNumber((java.lang.String)value);
      }
      break;

    case INITIATOR_FIO:
      if (value == null) {
        unsetInitiatorFio();
      } else {
        setInitiatorFio((java.lang.String)value);
      }
      break;

    case DOCUMENT_KIND:
      if (value == null) {
        unsetDocumentKind();
      } else {
        setDocumentKind((java.lang.String)value);
      }
      break;

    case CAN_BE_REJECTED:
      if (value == null) {
        unsetCanBeRejected();
      } else {
        setCanBeRejected((java.lang.Boolean)value);
      }
      break;

    case CARD_HTML_URL:
      if (value == null) {
        unsetCardHtmlUrl();
      } else {
        setCardHtmlUrl((java.lang.String)value);
      }
      break;

    case CONTENTS:
      if (value == null) {
        unsetContents();
      } else {
        setContents((java.util.List<ThriftDocumentContent>)value);
      }
      break;

    case DATE_SENT:
      if (value == null) {
        unsetDateSent();
      } else {
        setDateSent((java.lang.Long)value);
      }
      break;

    case TASK_TYPE:
      if (value == null) {
        unsetTaskType();
      } else {
        setTaskType((ThriftTaskType)value);
      }
      break;

    case DOC_TYPE:
      if (value == null) {
        unsetDocType();
      } else {
        setDocType((ThriftDocumentType)value);
      }
      break;

    case ACTIONS:
      if (value == null) {
        unsetActions();
      } else {
        setActions((java.util.List<ThriftTaskAction>)value);
      }
      break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case TASK_NAME:
      return getTaskName();

    case DOCUMENT_TITLE:
      return getDocumentTitle();

    case DOCUMENT_REG_NUMBER:
      return getDocumentRegNumber();

    case INITIATOR_FIO:
      return getInitiatorFio();

    case DOCUMENT_KIND:
      return getDocumentKind();

    case CAN_BE_REJECTED:
      return isCanBeRejected();

    case CARD_HTML_URL:
      return getCardHtmlUrl();

    case CONTENTS:
      return getContents();

    case DATE_SENT:
      return getDateSent();

    case TASK_TYPE:
      return getTaskType();

    case DOC_TYPE:
      return getDocType();

    case ACTIONS:
      return getActions();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case TASK_NAME:
      return isSetTaskName();
    case DOCUMENT_TITLE:
      return isSetDocumentTitle();
    case DOCUMENT_REG_NUMBER:
      return isSetDocumentRegNumber();
    case INITIATOR_FIO:
      return isSetInitiatorFio();
    case DOCUMENT_KIND:
      return isSetDocumentKind();
    case CAN_BE_REJECTED:
      return isSetCanBeRejected();
    case CARD_HTML_URL:
      return isSetCardHtmlUrl();
    case CONTENTS:
      return isSetContents();
    case DATE_SENT:
      return isSetDateSent();
    case TASK_TYPE:
      return isSetTaskType();
    case DOC_TYPE:
      return isSetDocType();
    case ACTIONS:
      return isSetActions();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof ThriftTaskDetails)
      return this.equals((ThriftTaskDetails)that);
    return false;
  }

  public boolean equals(ThriftTaskDetails that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_taskName = true && this.isSetTaskName();
    boolean that_present_taskName = true && that.isSetTaskName();
    if (this_present_taskName || that_present_taskName) {
      if (!(this_present_taskName && that_present_taskName))
        return false;
      if (!this.taskName.equals(that.taskName))
        return false;
    }

    boolean this_present_documentTitle = true && this.isSetDocumentTitle();
    boolean that_present_documentTitle = true && that.isSetDocumentTitle();
    if (this_present_documentTitle || that_present_documentTitle) {
      if (!(this_present_documentTitle && that_present_documentTitle))
        return false;
      if (!this.documentTitle.equals(that.documentTitle))
        return false;
    }

    boolean this_present_documentRegNumber = true && this.isSetDocumentRegNumber();
    boolean that_present_documentRegNumber = true && that.isSetDocumentRegNumber();
    if (this_present_documentRegNumber || that_present_documentRegNumber) {
      if (!(this_present_documentRegNumber && that_present_documentRegNumber))
        return false;
      if (!this.documentRegNumber.equals(that.documentRegNumber))
        return false;
    }

    boolean this_present_initiatorFio = true && this.isSetInitiatorFio();
    boolean that_present_initiatorFio = true && that.isSetInitiatorFio();
    if (this_present_initiatorFio || that_present_initiatorFio) {
      if (!(this_present_initiatorFio && that_present_initiatorFio))
        return false;
      if (!this.initiatorFio.equals(that.initiatorFio))
        return false;
    }

    boolean this_present_documentKind = true && this.isSetDocumentKind();
    boolean that_present_documentKind = true && that.isSetDocumentKind();
    if (this_present_documentKind || that_present_documentKind) {
      if (!(this_present_documentKind && that_present_documentKind))
        return false;
      if (!this.documentKind.equals(that.documentKind))
        return false;
    }

    boolean this_present_canBeRejected = true;
    boolean that_present_canBeRejected = true;
    if (this_present_canBeRejected || that_present_canBeRejected) {
      if (!(this_present_canBeRejected && that_present_canBeRejected))
        return false;
      if (this.canBeRejected != that.canBeRejected)
        return false;
    }

    boolean this_present_cardHtmlUrl = true && this.isSetCardHtmlUrl();
    boolean that_present_cardHtmlUrl = true && that.isSetCardHtmlUrl();
    if (this_present_cardHtmlUrl || that_present_cardHtmlUrl) {
      if (!(this_present_cardHtmlUrl && that_present_cardHtmlUrl))
        return false;
      if (!this.cardHtmlUrl.equals(that.cardHtmlUrl))
        return false;
    }

    boolean this_present_contents = true && this.isSetContents();
    boolean that_present_contents = true && that.isSetContents();
    if (this_present_contents || that_present_contents) {
      if (!(this_present_contents && that_present_contents))
        return false;
      if (!this.contents.equals(that.contents))
        return false;
    }

    boolean this_present_dateSent = true;
    boolean that_present_dateSent = true;
    if (this_present_dateSent || that_present_dateSent) {
      if (!(this_present_dateSent && that_present_dateSent))
        return false;
      if (this.dateSent != that.dateSent)
        return false;
    }

    boolean this_present_taskType = true && this.isSetTaskType();
    boolean that_present_taskType = true && that.isSetTaskType();
    if (this_present_taskType || that_present_taskType) {
      if (!(this_present_taskType && that_present_taskType))
        return false;
      if (!this.taskType.equals(that.taskType))
        return false;
    }

    boolean this_present_docType = true && this.isSetDocType();
    boolean that_present_docType = true && that.isSetDocType();
    if (this_present_docType || that_present_docType) {
      if (!(this_present_docType && that_present_docType))
        return false;
      if (!this.docType.equals(that.docType))
        return false;
    }

    boolean this_present_actions = true && this.isSetActions();
    boolean that_present_actions = true && that.isSetActions();
    if (this_present_actions || that_present_actions) {
      if (!(this_present_actions && that_present_actions))
        return false;
      if (!this.actions.equals(that.actions))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetTaskName()) ? 131071 : 524287);
    if (isSetTaskName())
      hashCode = hashCode * 8191 + taskName.hashCode();

    hashCode = hashCode * 8191 + ((isSetDocumentTitle()) ? 131071 : 524287);
    if (isSetDocumentTitle())
      hashCode = hashCode * 8191 + documentTitle.hashCode();

    hashCode = hashCode * 8191 + ((isSetDocumentRegNumber()) ? 131071 : 524287);
    if (isSetDocumentRegNumber())
      hashCode = hashCode * 8191 + documentRegNumber.hashCode();

    hashCode = hashCode * 8191 + ((isSetInitiatorFio()) ? 131071 : 524287);
    if (isSetInitiatorFio())
      hashCode = hashCode * 8191 + initiatorFio.hashCode();

    hashCode = hashCode * 8191 + ((isSetDocumentKind()) ? 131071 : 524287);
    if (isSetDocumentKind())
      hashCode = hashCode * 8191 + documentKind.hashCode();

    hashCode = hashCode * 8191 + ((canBeRejected) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((isSetCardHtmlUrl()) ? 131071 : 524287);
    if (isSetCardHtmlUrl())
      hashCode = hashCode * 8191 + cardHtmlUrl.hashCode();

    hashCode = hashCode * 8191 + ((isSetContents()) ? 131071 : 524287);
    if (isSetContents())
      hashCode = hashCode * 8191 + contents.hashCode();

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(dateSent);

    hashCode = hashCode * 8191 + ((isSetTaskType()) ? 131071 : 524287);
    if (isSetTaskType())
      hashCode = hashCode * 8191 + taskType.getValue();

    hashCode = hashCode * 8191 + ((isSetDocType()) ? 131071 : 524287);
    if (isSetDocType())
      hashCode = hashCode * 8191 + docType.getValue();

    hashCode = hashCode * 8191 + ((isSetActions()) ? 131071 : 524287);
    if (isSetActions())
      hashCode = hashCode * 8191 + actions.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(ThriftTaskDetails other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetTaskName()).compareTo(other.isSetTaskName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTaskName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.taskName, other.taskName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetDocumentTitle()).compareTo(other.isSetDocumentTitle());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDocumentTitle()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.documentTitle, other.documentTitle);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetDocumentRegNumber()).compareTo(other.isSetDocumentRegNumber());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDocumentRegNumber()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.documentRegNumber, other.documentRegNumber);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetInitiatorFio()).compareTo(other.isSetInitiatorFio());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetInitiatorFio()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.initiatorFio, other.initiatorFio);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetDocumentKind()).compareTo(other.isSetDocumentKind());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDocumentKind()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.documentKind, other.documentKind);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetCanBeRejected()).compareTo(other.isSetCanBeRejected());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCanBeRejected()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.canBeRejected, other.canBeRejected);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetCardHtmlUrl()).compareTo(other.isSetCardHtmlUrl());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCardHtmlUrl()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cardHtmlUrl, other.cardHtmlUrl);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetContents()).compareTo(other.isSetContents());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetContents()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.contents, other.contents);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetDateSent()).compareTo(other.isSetDateSent());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDateSent()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dateSent, other.dateSent);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetTaskType()).compareTo(other.isSetTaskType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTaskType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.taskType, other.taskType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetDocType()).compareTo(other.isSetDocType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDocType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.docType, other.docType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetActions()).compareTo(other.isSetActions());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetActions()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.actions, other.actions);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("ThriftTaskDetails(");
    boolean first = true;

    sb.append("taskName:");
    if (this.taskName == null) {
      sb.append("null");
    } else {
      sb.append(this.taskName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("documentTitle:");
    if (this.documentTitle == null) {
      sb.append("null");
    } else {
      sb.append(this.documentTitle);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("documentRegNumber:");
    if (this.documentRegNumber == null) {
      sb.append("null");
    } else {
      sb.append(this.documentRegNumber);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("initiatorFio:");
    if (this.initiatorFio == null) {
      sb.append("null");
    } else {
      sb.append(this.initiatorFio);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("documentKind:");
    if (this.documentKind == null) {
      sb.append("null");
    } else {
      sb.append(this.documentKind);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("canBeRejected:");
    sb.append(this.canBeRejected);
    first = false;
    if (!first) sb.append(", ");
    sb.append("cardHtmlUrl:");
    if (this.cardHtmlUrl == null) {
      sb.append("null");
    } else {
      sb.append(this.cardHtmlUrl);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("contents:");
    if (this.contents == null) {
      sb.append("null");
    } else {
      sb.append(this.contents);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("dateSent:");
    sb.append(this.dateSent);
    first = false;
    if (!first) sb.append(", ");
    sb.append("taskType:");
    if (this.taskType == null) {
      sb.append("null");
    } else {
      sb.append(this.taskType);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("docType:");
    if (this.docType == null) {
      sb.append("null");
    } else {
      sb.append(this.docType);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("actions:");
    if (this.actions == null) {
      sb.append("null");
    } else {
      sb.append(this.actions);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ThriftTaskDetailsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public ThriftTaskDetailsStandardScheme getScheme() {
      return new ThriftTaskDetailsStandardScheme();
    }
  }

  private static class ThriftTaskDetailsStandardScheme extends org.apache.thrift.scheme.StandardScheme<ThriftTaskDetails> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ThriftTaskDetails struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // TASK_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.taskName = iprot.readString();
              struct.setTaskNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // DOCUMENT_TITLE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.documentTitle = iprot.readString();
              struct.setDocumentTitleIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // DOCUMENT_REG_NUMBER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.documentRegNumber = iprot.readString();
              struct.setDocumentRegNumberIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // INITIATOR_FIO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.initiatorFio = iprot.readString();
              struct.setInitiatorFioIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // DOCUMENT_KIND
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.documentKind = iprot.readString();
              struct.setDocumentKindIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // CAN_BE_REJECTED
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.canBeRejected = iprot.readBool();
              struct.setCanBeRejectedIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // CARD_HTML_URL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.cardHtmlUrl = iprot.readString();
              struct.setCardHtmlUrlIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // CONTENTS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                struct.contents = new java.util.ArrayList<ThriftDocumentContent>(_list0.size);
                ThriftDocumentContent _elem1;
                for (int _i2 = 0; _i2 < _list0.size; ++_i2)
                {
                  _elem1 = new ThriftDocumentContent();
                  _elem1.read(iprot);
                  struct.contents.add(_elem1);
                }
                iprot.readListEnd();
              }
              struct.setContentsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // DATE_SENT
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.dateSent = iprot.readI64();
              struct.setDateSentIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // TASK_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.taskType = kz.pnhz.iserver.thrift.generated.ThriftTaskType.findByValue(iprot.readI32());
              struct.setTaskTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // DOC_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.docType = kz.pnhz.iserver.thrift.generated.ThriftDocumentType.findByValue(iprot.readI32());
              struct.setDocTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // ACTIONS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list3 = iprot.readListBegin();
                struct.actions = new java.util.ArrayList<ThriftTaskAction>(_list3.size);
                ThriftTaskAction _elem4;
                for (int _i5 = 0; _i5 < _list3.size; ++_i5)
                {
                  _elem4 = new ThriftTaskAction();
                  _elem4.read(iprot);
                  struct.actions.add(_elem4);
                }
                iprot.readListEnd();
              }
              struct.setActionsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ThriftTaskDetails struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.taskName != null) {
        oprot.writeFieldBegin(TASK_NAME_FIELD_DESC);
        oprot.writeString(struct.taskName);
        oprot.writeFieldEnd();
      }
      if (struct.documentTitle != null) {
        oprot.writeFieldBegin(DOCUMENT_TITLE_FIELD_DESC);
        oprot.writeString(struct.documentTitle);
        oprot.writeFieldEnd();
      }
      if (struct.documentRegNumber != null) {
        oprot.writeFieldBegin(DOCUMENT_REG_NUMBER_FIELD_DESC);
        oprot.writeString(struct.documentRegNumber);
        oprot.writeFieldEnd();
      }
      if (struct.initiatorFio != null) {
        oprot.writeFieldBegin(INITIATOR_FIO_FIELD_DESC);
        oprot.writeString(struct.initiatorFio);
        oprot.writeFieldEnd();
      }
      if (struct.documentKind != null) {
        oprot.writeFieldBegin(DOCUMENT_KIND_FIELD_DESC);
        oprot.writeString(struct.documentKind);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(CAN_BE_REJECTED_FIELD_DESC);
      oprot.writeBool(struct.canBeRejected);
      oprot.writeFieldEnd();
      if (struct.cardHtmlUrl != null) {
        oprot.writeFieldBegin(CARD_HTML_URL_FIELD_DESC);
        oprot.writeString(struct.cardHtmlUrl);
        oprot.writeFieldEnd();
      }
      if (struct.contents != null) {
        oprot.writeFieldBegin(CONTENTS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.contents.size()));
          for (ThriftDocumentContent _iter6 : struct.contents)
          {
            _iter6.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(DATE_SENT_FIELD_DESC);
      oprot.writeI64(struct.dateSent);
      oprot.writeFieldEnd();
      if (struct.taskType != null) {
        oprot.writeFieldBegin(TASK_TYPE_FIELD_DESC);
        oprot.writeI32(struct.taskType.getValue());
        oprot.writeFieldEnd();
      }
      if (struct.docType != null) {
        oprot.writeFieldBegin(DOC_TYPE_FIELD_DESC);
        oprot.writeI32(struct.docType.getValue());
        oprot.writeFieldEnd();
      }
      if (struct.actions != null) {
        oprot.writeFieldBegin(ACTIONS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.actions.size()));
          for (ThriftTaskAction _iter7 : struct.actions)
          {
            _iter7.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ThriftTaskDetailsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public ThriftTaskDetailsTupleScheme getScheme() {
      return new ThriftTaskDetailsTupleScheme();
    }
  }

  private static class ThriftTaskDetailsTupleScheme extends org.apache.thrift.scheme.TupleScheme<ThriftTaskDetails> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ThriftTaskDetails struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetTaskName()) {
        optionals.set(0);
      }
      if (struct.isSetDocumentTitle()) {
        optionals.set(1);
      }
      if (struct.isSetDocumentRegNumber()) {
        optionals.set(2);
      }
      if (struct.isSetInitiatorFio()) {
        optionals.set(3);
      }
      if (struct.isSetDocumentKind()) {
        optionals.set(4);
      }
      if (struct.isSetCanBeRejected()) {
        optionals.set(5);
      }
      if (struct.isSetCardHtmlUrl()) {
        optionals.set(6);
      }
      if (struct.isSetContents()) {
        optionals.set(7);
      }
      if (struct.isSetDateSent()) {
        optionals.set(8);
      }
      if (struct.isSetTaskType()) {
        optionals.set(9);
      }
      if (struct.isSetDocType()) {
        optionals.set(10);
      }
      if (struct.isSetActions()) {
        optionals.set(11);
      }
      oprot.writeBitSet(optionals, 12);
      if (struct.isSetTaskName()) {
        oprot.writeString(struct.taskName);
      }
      if (struct.isSetDocumentTitle()) {
        oprot.writeString(struct.documentTitle);
      }
      if (struct.isSetDocumentRegNumber()) {
        oprot.writeString(struct.documentRegNumber);
      }
      if (struct.isSetInitiatorFio()) {
        oprot.writeString(struct.initiatorFio);
      }
      if (struct.isSetDocumentKind()) {
        oprot.writeString(struct.documentKind);
      }
      if (struct.isSetCanBeRejected()) {
        oprot.writeBool(struct.canBeRejected);
      }
      if (struct.isSetCardHtmlUrl()) {
        oprot.writeString(struct.cardHtmlUrl);
      }
      if (struct.isSetContents()) {
        {
          oprot.writeI32(struct.contents.size());
          for (ThriftDocumentContent _iter8 : struct.contents)
          {
            _iter8.write(oprot);
          }
        }
      }
      if (struct.isSetDateSent()) {
        oprot.writeI64(struct.dateSent);
      }
      if (struct.isSetTaskType()) {
        oprot.writeI32(struct.taskType.getValue());
      }
      if (struct.isSetDocType()) {
        oprot.writeI32(struct.docType.getValue());
      }
      if (struct.isSetActions()) {
        {
          oprot.writeI32(struct.actions.size());
          for (ThriftTaskAction _iter9 : struct.actions)
          {
            _iter9.write(oprot);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ThriftTaskDetails struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(12);
      if (incoming.get(0)) {
        struct.taskName = iprot.readString();
        struct.setTaskNameIsSet(true);
      }
      if (incoming.get(1)) {
        struct.documentTitle = iprot.readString();
        struct.setDocumentTitleIsSet(true);
      }
      if (incoming.get(2)) {
        struct.documentRegNumber = iprot.readString();
        struct.setDocumentRegNumberIsSet(true);
      }
      if (incoming.get(3)) {
        struct.initiatorFio = iprot.readString();
        struct.setInitiatorFioIsSet(true);
      }
      if (incoming.get(4)) {
        struct.documentKind = iprot.readString();
        struct.setDocumentKindIsSet(true);
      }
      if (incoming.get(5)) {
        struct.canBeRejected = iprot.readBool();
        struct.setCanBeRejectedIsSet(true);
      }
      if (incoming.get(6)) {
        struct.cardHtmlUrl = iprot.readString();
        struct.setCardHtmlUrlIsSet(true);
      }
      if (incoming.get(7)) {
        {
          org.apache.thrift.protocol.TList _list10 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.contents = new java.util.ArrayList<ThriftDocumentContent>(_list10.size);
          ThriftDocumentContent _elem11;
          for (int _i12 = 0; _i12 < _list10.size; ++_i12)
          {
            _elem11 = new ThriftDocumentContent();
            _elem11.read(iprot);
            struct.contents.add(_elem11);
          }
        }
        struct.setContentsIsSet(true);
      }
      if (incoming.get(8)) {
        struct.dateSent = iprot.readI64();
        struct.setDateSentIsSet(true);
      }
      if (incoming.get(9)) {
        struct.taskType = kz.pnhz.iserver.thrift.generated.ThriftTaskType.findByValue(iprot.readI32());
        struct.setTaskTypeIsSet(true);
      }
      if (incoming.get(10)) {
        struct.docType = kz.pnhz.iserver.thrift.generated.ThriftDocumentType.findByValue(iprot.readI32());
        struct.setDocTypeIsSet(true);
      }
      if (incoming.get(11)) {
        {
          org.apache.thrift.protocol.TList _list13 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.actions = new java.util.ArrayList<ThriftTaskAction>(_list13.size);
          ThriftTaskAction _elem14;
          for (int _i15 = 0; _i15 < _list13.size; ++_i15)
          {
            _elem14 = new ThriftTaskAction();
            _elem14.read(iprot);
            struct.actions.add(_elem14);
          }
        }
        struct.setActionsIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

