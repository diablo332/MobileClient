/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package kz.pnhz.iserver.thrift.generated;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.10.0)", date = "2017-10-15")
public class ThriftReportRequest implements org.apache.thrift.TBase<ThriftReportRequest, ThriftReportRequest._Fields>, java.io.Serializable, Cloneable, Comparable<ThriftReportRequest> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ThriftReportRequest");

  private static final org.apache.thrift.protocol.TField COMMON_DATA_FIELD_DESC = new org.apache.thrift.protocol.TField("commonData", org.apache.thrift.protocol.TType.STRUCT, (short)1);
  private static final org.apache.thrift.protocol.TField COMPOSITE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("compositeId", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField REPORT_FIELD_DESC = new org.apache.thrift.protocol.TField("report", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField FILES_IDS_FIELD_DESC = new org.apache.thrift.protocol.TField("filesIds", org.apache.thrift.protocol.TType.LIST, (short)4);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new ThriftReportRequestStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new ThriftReportRequestTupleSchemeFactory();

  public kz.pnhz.mobile.thrift.generated.ThriftRequestBase commonData; // required
  public java.lang.String compositeId; // required
  public java.lang.String report; // required
  public java.util.List<java.lang.String> filesIds; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    COMMON_DATA((short)1, "commonData"),
    COMPOSITE_ID((short)2, "compositeId"),
    REPORT((short)3, "report"),
    FILES_IDS((short)4, "filesIds");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // COMMON_DATA
          return COMMON_DATA;
        case 2: // COMPOSITE_ID
          return COMPOSITE_ID;
        case 3: // REPORT
          return REPORT;
        case 4: // FILES_IDS
          return FILES_IDS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.COMMON_DATA, new org.apache.thrift.meta_data.FieldMetaData("commonData", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, kz.pnhz.mobile.thrift.generated.ThriftRequestBase.class)));
    tmpMap.put(_Fields.COMPOSITE_ID, new org.apache.thrift.meta_data.FieldMetaData("compositeId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.REPORT, new org.apache.thrift.meta_data.FieldMetaData("report", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.FILES_IDS, new org.apache.thrift.meta_data.FieldMetaData("filesIds", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ThriftReportRequest.class, metaDataMap);
  }

  public ThriftReportRequest() {
  }

  public ThriftReportRequest(
    kz.pnhz.mobile.thrift.generated.ThriftRequestBase commonData,
    java.lang.String compositeId,
    java.lang.String report,
    java.util.List<java.lang.String> filesIds)
  {
    this();
    this.commonData = commonData;
    this.compositeId = compositeId;
    this.report = report;
    this.filesIds = filesIds;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ThriftReportRequest(ThriftReportRequest other) {
    if (other.isSetCommonData()) {
      this.commonData = new kz.pnhz.mobile.thrift.generated.ThriftRequestBase(other.commonData);
    }
    if (other.isSetCompositeId()) {
      this.compositeId = other.compositeId;
    }
    if (other.isSetReport()) {
      this.report = other.report;
    }
    if (other.isSetFilesIds()) {
      java.util.List<java.lang.String> __this__filesIds = new java.util.ArrayList<java.lang.String>(other.filesIds);
      this.filesIds = __this__filesIds;
    }
  }

  public ThriftReportRequest deepCopy() {
    return new ThriftReportRequest(this);
  }

  @Override
  public void clear() {
    this.commonData = null;
    this.compositeId = null;
    this.report = null;
    this.filesIds = null;
  }

  public kz.pnhz.mobile.thrift.generated.ThriftRequestBase getCommonData() {
    return this.commonData;
  }

  public ThriftReportRequest setCommonData(kz.pnhz.mobile.thrift.generated.ThriftRequestBase commonData) {
    this.commonData = commonData;
    return this;
  }

  public void unsetCommonData() {
    this.commonData = null;
  }

  /** Returns true if field commonData is set (has been assigned a value) and false otherwise */
  public boolean isSetCommonData() {
    return this.commonData != null;
  }

  public void setCommonDataIsSet(boolean value) {
    if (!value) {
      this.commonData = null;
    }
  }

  public java.lang.String getCompositeId() {
    return this.compositeId;
  }

  public ThriftReportRequest setCompositeId(java.lang.String compositeId) {
    this.compositeId = compositeId;
    return this;
  }

  public void unsetCompositeId() {
    this.compositeId = null;
  }

  /** Returns true if field compositeId is set (has been assigned a value) and false otherwise */
  public boolean isSetCompositeId() {
    return this.compositeId != null;
  }

  public void setCompositeIdIsSet(boolean value) {
    if (!value) {
      this.compositeId = null;
    }
  }

  public java.lang.String getReport() {
    return this.report;
  }

  public ThriftReportRequest setReport(java.lang.String report) {
    this.report = report;
    return this;
  }

  public void unsetReport() {
    this.report = null;
  }

  /** Returns true if field report is set (has been assigned a value) and false otherwise */
  public boolean isSetReport() {
    return this.report != null;
  }

  public void setReportIsSet(boolean value) {
    if (!value) {
      this.report = null;
    }
  }

  public int getFilesIdsSize() {
    return (this.filesIds == null) ? 0 : this.filesIds.size();
  }

  public java.util.Iterator<java.lang.String> getFilesIdsIterator() {
    return (this.filesIds == null) ? null : this.filesIds.iterator();
  }

  public void addToFilesIds(java.lang.String elem) {
    if (this.filesIds == null) {
      this.filesIds = new java.util.ArrayList<java.lang.String>();
    }
    this.filesIds.add(elem);
  }

  public java.util.List<java.lang.String> getFilesIds() {
    return this.filesIds;
  }

  public ThriftReportRequest setFilesIds(java.util.List<java.lang.String> filesIds) {
    this.filesIds = filesIds;
    return this;
  }

  public void unsetFilesIds() {
    this.filesIds = null;
  }

  /** Returns true if field filesIds is set (has been assigned a value) and false otherwise */
  public boolean isSetFilesIds() {
    return this.filesIds != null;
  }

  public void setFilesIdsIsSet(boolean value) {
    if (!value) {
      this.filesIds = null;
    }
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
    case COMMON_DATA:
      if (value == null) {
        unsetCommonData();
      } else {
        setCommonData((kz.pnhz.mobile.thrift.generated.ThriftRequestBase)value);
      }
      break;

    case COMPOSITE_ID:
      if (value == null) {
        unsetCompositeId();
      } else {
        setCompositeId((java.lang.String)value);
      }
      break;

    case REPORT:
      if (value == null) {
        unsetReport();
      } else {
        setReport((java.lang.String)value);
      }
      break;

    case FILES_IDS:
      if (value == null) {
        unsetFilesIds();
      } else {
        setFilesIds((java.util.List<java.lang.String>)value);
      }
      break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case COMMON_DATA:
      return getCommonData();

    case COMPOSITE_ID:
      return getCompositeId();

    case REPORT:
      return getReport();

    case FILES_IDS:
      return getFilesIds();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case COMMON_DATA:
      return isSetCommonData();
    case COMPOSITE_ID:
      return isSetCompositeId();
    case REPORT:
      return isSetReport();
    case FILES_IDS:
      return isSetFilesIds();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof ThriftReportRequest)
      return this.equals((ThriftReportRequest)that);
    return false;
  }

  public boolean equals(ThriftReportRequest that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_commonData = true && this.isSetCommonData();
    boolean that_present_commonData = true && that.isSetCommonData();
    if (this_present_commonData || that_present_commonData) {
      if (!(this_present_commonData && that_present_commonData))
        return false;
      if (!this.commonData.equals(that.commonData))
        return false;
    }

    boolean this_present_compositeId = true && this.isSetCompositeId();
    boolean that_present_compositeId = true && that.isSetCompositeId();
    if (this_present_compositeId || that_present_compositeId) {
      if (!(this_present_compositeId && that_present_compositeId))
        return false;
      if (!this.compositeId.equals(that.compositeId))
        return false;
    }

    boolean this_present_report = true && this.isSetReport();
    boolean that_present_report = true && that.isSetReport();
    if (this_present_report || that_present_report) {
      if (!(this_present_report && that_present_report))
        return false;
      if (!this.report.equals(that.report))
        return false;
    }

    boolean this_present_filesIds = true && this.isSetFilesIds();
    boolean that_present_filesIds = true && that.isSetFilesIds();
    if (this_present_filesIds || that_present_filesIds) {
      if (!(this_present_filesIds && that_present_filesIds))
        return false;
      if (!this.filesIds.equals(that.filesIds))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetCommonData()) ? 131071 : 524287);
    if (isSetCommonData())
      hashCode = hashCode * 8191 + commonData.hashCode();

    hashCode = hashCode * 8191 + ((isSetCompositeId()) ? 131071 : 524287);
    if (isSetCompositeId())
      hashCode = hashCode * 8191 + compositeId.hashCode();

    hashCode = hashCode * 8191 + ((isSetReport()) ? 131071 : 524287);
    if (isSetReport())
      hashCode = hashCode * 8191 + report.hashCode();

    hashCode = hashCode * 8191 + ((isSetFilesIds()) ? 131071 : 524287);
    if (isSetFilesIds())
      hashCode = hashCode * 8191 + filesIds.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(ThriftReportRequest other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetCommonData()).compareTo(other.isSetCommonData());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCommonData()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.commonData, other.commonData);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetCompositeId()).compareTo(other.isSetCompositeId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCompositeId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.compositeId, other.compositeId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetReport()).compareTo(other.isSetReport());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReport()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.report, other.report);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetFilesIds()).compareTo(other.isSetFilesIds());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFilesIds()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.filesIds, other.filesIds);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("ThriftReportRequest(");
    boolean first = true;

    sb.append("commonData:");
    if (this.commonData == null) {
      sb.append("null");
    } else {
      sb.append(this.commonData);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("compositeId:");
    if (this.compositeId == null) {
      sb.append("null");
    } else {
      sb.append(this.compositeId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("report:");
    if (this.report == null) {
      sb.append("null");
    } else {
      sb.append(this.report);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("filesIds:");
    if (this.filesIds == null) {
      sb.append("null");
    } else {
      sb.append(this.filesIds);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (commonData != null) {
      commonData.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ThriftReportRequestStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public ThriftReportRequestStandardScheme getScheme() {
      return new ThriftReportRequestStandardScheme();
    }
  }

  private static class ThriftReportRequestStandardScheme extends org.apache.thrift.scheme.StandardScheme<ThriftReportRequest> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ThriftReportRequest struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // COMMON_DATA
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.commonData = new kz.pnhz.mobile.thrift.generated.ThriftRequestBase();
              struct.commonData.read(iprot);
              struct.setCommonDataIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // COMPOSITE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.compositeId = iprot.readString();
              struct.setCompositeIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // REPORT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.report = iprot.readString();
              struct.setReportIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // FILES_IDS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list32 = iprot.readListBegin();
                struct.filesIds = new java.util.ArrayList<java.lang.String>(_list32.size);
                java.lang.String _elem33;
                for (int _i34 = 0; _i34 < _list32.size; ++_i34)
                {
                  _elem33 = iprot.readString();
                  struct.filesIds.add(_elem33);
                }
                iprot.readListEnd();
              }
              struct.setFilesIdsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ThriftReportRequest struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.commonData != null) {
        oprot.writeFieldBegin(COMMON_DATA_FIELD_DESC);
        struct.commonData.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.compositeId != null) {
        oprot.writeFieldBegin(COMPOSITE_ID_FIELD_DESC);
        oprot.writeString(struct.compositeId);
        oprot.writeFieldEnd();
      }
      if (struct.report != null) {
        oprot.writeFieldBegin(REPORT_FIELD_DESC);
        oprot.writeString(struct.report);
        oprot.writeFieldEnd();
      }
      if (struct.filesIds != null) {
        oprot.writeFieldBegin(FILES_IDS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.filesIds.size()));
          for (java.lang.String _iter35 : struct.filesIds)
          {
            oprot.writeString(_iter35);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ThriftReportRequestTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public ThriftReportRequestTupleScheme getScheme() {
      return new ThriftReportRequestTupleScheme();
    }
  }

  private static class ThriftReportRequestTupleScheme extends org.apache.thrift.scheme.TupleScheme<ThriftReportRequest> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ThriftReportRequest struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetCommonData()) {
        optionals.set(0);
      }
      if (struct.isSetCompositeId()) {
        optionals.set(1);
      }
      if (struct.isSetReport()) {
        optionals.set(2);
      }
      if (struct.isSetFilesIds()) {
        optionals.set(3);
      }
      oprot.writeBitSet(optionals, 4);
      if (struct.isSetCommonData()) {
        struct.commonData.write(oprot);
      }
      if (struct.isSetCompositeId()) {
        oprot.writeString(struct.compositeId);
      }
      if (struct.isSetReport()) {
        oprot.writeString(struct.report);
      }
      if (struct.isSetFilesIds()) {
        {
          oprot.writeI32(struct.filesIds.size());
          for (java.lang.String _iter36 : struct.filesIds)
          {
            oprot.writeString(_iter36);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ThriftReportRequest struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(4);
      if (incoming.get(0)) {
        struct.commonData = new kz.pnhz.mobile.thrift.generated.ThriftRequestBase();
        struct.commonData.read(iprot);
        struct.setCommonDataIsSet(true);
      }
      if (incoming.get(1)) {
        struct.compositeId = iprot.readString();
        struct.setCompositeIdIsSet(true);
      }
      if (incoming.get(2)) {
        struct.report = iprot.readString();
        struct.setReportIsSet(true);
      }
      if (incoming.get(3)) {
        {
          org.apache.thrift.protocol.TList _list37 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.filesIds = new java.util.ArrayList<java.lang.String>(_list37.size);
          java.lang.String _elem38;
          for (int _i39 = 0; _i39 < _list37.size; ++_i39)
          {
            _elem38 = iprot.readString();
            struct.filesIds.add(_elem38);
          }
        }
        struct.setFilesIdsIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

