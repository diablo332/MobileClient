/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package kz.pnhz.iserver.thrift.generated;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.10.0)", date = "2017-10-15")
public class ThriftChargeRequest implements org.apache.thrift.TBase<ThriftChargeRequest, ThriftChargeRequest._Fields>, java.io.Serializable, Cloneable, Comparable<ThriftChargeRequest> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ThriftChargeRequest");

  private static final org.apache.thrift.protocol.TField COMMON_DATA_FIELD_DESC = new org.apache.thrift.protocol.TField("commonData", org.apache.thrift.protocol.TType.STRUCT, (short)1);
  private static final org.apache.thrift.protocol.TField COMPOSITE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("compositeId", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField CHARGES_FIELD_DESC = new org.apache.thrift.protocol.TField("charges", org.apache.thrift.protocol.TType.LIST, (short)3);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new ThriftChargeRequestStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new ThriftChargeRequestTupleSchemeFactory();

  public kz.pnhz.mobile.thrift.generated.ThriftRequestBase commonData; // required
  public java.lang.String compositeId; // required
  public java.util.List<ThriftCharge> charges; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    COMMON_DATA((short)1, "commonData"),
    COMPOSITE_ID((short)2, "compositeId"),
    CHARGES((short)3, "charges");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // COMMON_DATA
          return COMMON_DATA;
        case 2: // COMPOSITE_ID
          return COMPOSITE_ID;
        case 3: // CHARGES
          return CHARGES;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.COMMON_DATA, new org.apache.thrift.meta_data.FieldMetaData("commonData", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, kz.pnhz.mobile.thrift.generated.ThriftRequestBase.class)));
    tmpMap.put(_Fields.COMPOSITE_ID, new org.apache.thrift.meta_data.FieldMetaData("compositeId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CHARGES, new org.apache.thrift.meta_data.FieldMetaData("charges", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ThriftCharge.class))));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ThriftChargeRequest.class, metaDataMap);
  }

  public ThriftChargeRequest() {
  }

  public ThriftChargeRequest(
    kz.pnhz.mobile.thrift.generated.ThriftRequestBase commonData,
    java.lang.String compositeId,
    java.util.List<ThriftCharge> charges)
  {
    this();
    this.commonData = commonData;
    this.compositeId = compositeId;
    this.charges = charges;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ThriftChargeRequest(ThriftChargeRequest other) {
    if (other.isSetCommonData()) {
      this.commonData = new kz.pnhz.mobile.thrift.generated.ThriftRequestBase(other.commonData);
    }
    if (other.isSetCompositeId()) {
      this.compositeId = other.compositeId;
    }
    if (other.isSetCharges()) {
      java.util.List<ThriftCharge> __this__charges = new java.util.ArrayList<ThriftCharge>(other.charges.size());
      for (ThriftCharge other_element : other.charges) {
        __this__charges.add(new ThriftCharge(other_element));
      }
      this.charges = __this__charges;
    }
  }

  public ThriftChargeRequest deepCopy() {
    return new ThriftChargeRequest(this);
  }

  @Override
  public void clear() {
    this.commonData = null;
    this.compositeId = null;
    this.charges = null;
  }

  public kz.pnhz.mobile.thrift.generated.ThriftRequestBase getCommonData() {
    return this.commonData;
  }

  public ThriftChargeRequest setCommonData(kz.pnhz.mobile.thrift.generated.ThriftRequestBase commonData) {
    this.commonData = commonData;
    return this;
  }

  public void unsetCommonData() {
    this.commonData = null;
  }

  /** Returns true if field commonData is set (has been assigned a value) and false otherwise */
  public boolean isSetCommonData() {
    return this.commonData != null;
  }

  public void setCommonDataIsSet(boolean value) {
    if (!value) {
      this.commonData = null;
    }
  }

  public java.lang.String getCompositeId() {
    return this.compositeId;
  }

  public ThriftChargeRequest setCompositeId(java.lang.String compositeId) {
    this.compositeId = compositeId;
    return this;
  }

  public void unsetCompositeId() {
    this.compositeId = null;
  }

  /** Returns true if field compositeId is set (has been assigned a value) and false otherwise */
  public boolean isSetCompositeId() {
    return this.compositeId != null;
  }

  public void setCompositeIdIsSet(boolean value) {
    if (!value) {
      this.compositeId = null;
    }
  }

  public int getChargesSize() {
    return (this.charges == null) ? 0 : this.charges.size();
  }

  public java.util.Iterator<ThriftCharge> getChargesIterator() {
    return (this.charges == null) ? null : this.charges.iterator();
  }

  public void addToCharges(ThriftCharge elem) {
    if (this.charges == null) {
      this.charges = new java.util.ArrayList<ThriftCharge>();
    }
    this.charges.add(elem);
  }

  public java.util.List<ThriftCharge> getCharges() {
    return this.charges;
  }

  public ThriftChargeRequest setCharges(java.util.List<ThriftCharge> charges) {
    this.charges = charges;
    return this;
  }

  public void unsetCharges() {
    this.charges = null;
  }

  /** Returns true if field charges is set (has been assigned a value) and false otherwise */
  public boolean isSetCharges() {
    return this.charges != null;
  }

  public void setChargesIsSet(boolean value) {
    if (!value) {
      this.charges = null;
    }
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
    case COMMON_DATA:
      if (value == null) {
        unsetCommonData();
      } else {
        setCommonData((kz.pnhz.mobile.thrift.generated.ThriftRequestBase)value);
      }
      break;

    case COMPOSITE_ID:
      if (value == null) {
        unsetCompositeId();
      } else {
        setCompositeId((java.lang.String)value);
      }
      break;

    case CHARGES:
      if (value == null) {
        unsetCharges();
      } else {
        setCharges((java.util.List<ThriftCharge>)value);
      }
      break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case COMMON_DATA:
      return getCommonData();

    case COMPOSITE_ID:
      return getCompositeId();

    case CHARGES:
      return getCharges();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case COMMON_DATA:
      return isSetCommonData();
    case COMPOSITE_ID:
      return isSetCompositeId();
    case CHARGES:
      return isSetCharges();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof ThriftChargeRequest)
      return this.equals((ThriftChargeRequest)that);
    return false;
  }

  public boolean equals(ThriftChargeRequest that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_commonData = true && this.isSetCommonData();
    boolean that_present_commonData = true && that.isSetCommonData();
    if (this_present_commonData || that_present_commonData) {
      if (!(this_present_commonData && that_present_commonData))
        return false;
      if (!this.commonData.equals(that.commonData))
        return false;
    }

    boolean this_present_compositeId = true && this.isSetCompositeId();
    boolean that_present_compositeId = true && that.isSetCompositeId();
    if (this_present_compositeId || that_present_compositeId) {
      if (!(this_present_compositeId && that_present_compositeId))
        return false;
      if (!this.compositeId.equals(that.compositeId))
        return false;
    }

    boolean this_present_charges = true && this.isSetCharges();
    boolean that_present_charges = true && that.isSetCharges();
    if (this_present_charges || that_present_charges) {
      if (!(this_present_charges && that_present_charges))
        return false;
      if (!this.charges.equals(that.charges))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetCommonData()) ? 131071 : 524287);
    if (isSetCommonData())
      hashCode = hashCode * 8191 + commonData.hashCode();

    hashCode = hashCode * 8191 + ((isSetCompositeId()) ? 131071 : 524287);
    if (isSetCompositeId())
      hashCode = hashCode * 8191 + compositeId.hashCode();

    hashCode = hashCode * 8191 + ((isSetCharges()) ? 131071 : 524287);
    if (isSetCharges())
      hashCode = hashCode * 8191 + charges.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(ThriftChargeRequest other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetCommonData()).compareTo(other.isSetCommonData());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCommonData()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.commonData, other.commonData);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetCompositeId()).compareTo(other.isSetCompositeId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCompositeId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.compositeId, other.compositeId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetCharges()).compareTo(other.isSetCharges());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCharges()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.charges, other.charges);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("ThriftChargeRequest(");
    boolean first = true;

    sb.append("commonData:");
    if (this.commonData == null) {
      sb.append("null");
    } else {
      sb.append(this.commonData);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("compositeId:");
    if (this.compositeId == null) {
      sb.append("null");
    } else {
      sb.append(this.compositeId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("charges:");
    if (this.charges == null) {
      sb.append("null");
    } else {
      sb.append(this.charges);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (commonData != null) {
      commonData.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ThriftChargeRequestStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public ThriftChargeRequestStandardScheme getScheme() {
      return new ThriftChargeRequestStandardScheme();
    }
  }

  private static class ThriftChargeRequestStandardScheme extends org.apache.thrift.scheme.StandardScheme<ThriftChargeRequest> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ThriftChargeRequest struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // COMMON_DATA
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.commonData = new kz.pnhz.mobile.thrift.generated.ThriftRequestBase();
              struct.commonData.read(iprot);
              struct.setCommonDataIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // COMPOSITE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.compositeId = iprot.readString();
              struct.setCompositeIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // CHARGES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list24 = iprot.readListBegin();
                struct.charges = new java.util.ArrayList<ThriftCharge>(_list24.size);
                ThriftCharge _elem25;
                for (int _i26 = 0; _i26 < _list24.size; ++_i26)
                {
                  _elem25 = new ThriftCharge();
                  _elem25.read(iprot);
                  struct.charges.add(_elem25);
                }
                iprot.readListEnd();
              }
              struct.setChargesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ThriftChargeRequest struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.commonData != null) {
        oprot.writeFieldBegin(COMMON_DATA_FIELD_DESC);
        struct.commonData.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.compositeId != null) {
        oprot.writeFieldBegin(COMPOSITE_ID_FIELD_DESC);
        oprot.writeString(struct.compositeId);
        oprot.writeFieldEnd();
      }
      if (struct.charges != null) {
        oprot.writeFieldBegin(CHARGES_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.charges.size()));
          for (ThriftCharge _iter27 : struct.charges)
          {
            _iter27.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ThriftChargeRequestTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public ThriftChargeRequestTupleScheme getScheme() {
      return new ThriftChargeRequestTupleScheme();
    }
  }

  private static class ThriftChargeRequestTupleScheme extends org.apache.thrift.scheme.TupleScheme<ThriftChargeRequest> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ThriftChargeRequest struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetCommonData()) {
        optionals.set(0);
      }
      if (struct.isSetCompositeId()) {
        optionals.set(1);
      }
      if (struct.isSetCharges()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.isSetCommonData()) {
        struct.commonData.write(oprot);
      }
      if (struct.isSetCompositeId()) {
        oprot.writeString(struct.compositeId);
      }
      if (struct.isSetCharges()) {
        {
          oprot.writeI32(struct.charges.size());
          for (ThriftCharge _iter28 : struct.charges)
          {
            _iter28.write(oprot);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ThriftChargeRequest struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        struct.commonData = new kz.pnhz.mobile.thrift.generated.ThriftRequestBase();
        struct.commonData.read(iprot);
        struct.setCommonDataIsSet(true);
      }
      if (incoming.get(1)) {
        struct.compositeId = iprot.readString();
        struct.setCompositeIdIsSet(true);
      }
      if (incoming.get(2)) {
        {
          org.apache.thrift.protocol.TList _list29 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.charges = new java.util.ArrayList<ThriftCharge>(_list29.size);
          ThriftCharge _elem30;
          for (int _i31 = 0; _i31 < _list29.size; ++_i31)
          {
            _elem30 = new ThriftCharge();
            _elem30.read(iprot);
            struct.charges.add(_elem30);
          }
        }
        struct.setChargesIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

