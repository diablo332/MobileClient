/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package kz.pnhz.iserver.thrift.generated;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.10.0)", date = "2017-10-15")
public class ThriftChangesRequest implements org.apache.thrift.TBase<ThriftChangesRequest, ThriftChangesRequest._Fields>, java.io.Serializable, Cloneable, Comparable<ThriftChangesRequest> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ThriftChangesRequest");

  private static final org.apache.thrift.protocol.TField COMMON_DATA_FIELD_DESC = new org.apache.thrift.protocol.TField("commonData", org.apache.thrift.protocol.TType.STRUCT, (short)1);
  private static final org.apache.thrift.protocol.TField TASK_IDS_FIELD_DESC = new org.apache.thrift.protocol.TField("taskIds", org.apache.thrift.protocol.TType.LIST, (short)2);
  private static final org.apache.thrift.protocol.TField LAST_UPDATED_FIELD_DESC = new org.apache.thrift.protocol.TField("lastUpdated", org.apache.thrift.protocol.TType.I64, (short)3);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new ThriftChangesRequestStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new ThriftChangesRequestTupleSchemeFactory();

  public kz.pnhz.mobile.thrift.generated.ThriftRequestBase commonData; // required
  public java.util.List<java.lang.String> taskIds; // required
  public long lastUpdated; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    COMMON_DATA((short)1, "commonData"),
    TASK_IDS((short)2, "taskIds"),
    LAST_UPDATED((short)3, "lastUpdated");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // COMMON_DATA
          return COMMON_DATA;
        case 2: // TASK_IDS
          return TASK_IDS;
        case 3: // LAST_UPDATED
          return LAST_UPDATED;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __LASTUPDATED_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.COMMON_DATA, new org.apache.thrift.meta_data.FieldMetaData("commonData", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, kz.pnhz.mobile.thrift.generated.ThriftRequestBase.class)));
    tmpMap.put(_Fields.TASK_IDS, new org.apache.thrift.meta_data.FieldMetaData("taskIds", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.LAST_UPDATED, new org.apache.thrift.meta_data.FieldMetaData("lastUpdated", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ThriftChangesRequest.class, metaDataMap);
  }

  public ThriftChangesRequest() {
  }

  public ThriftChangesRequest(
    kz.pnhz.mobile.thrift.generated.ThriftRequestBase commonData,
    java.util.List<java.lang.String> taskIds,
    long lastUpdated)
  {
    this();
    this.commonData = commonData;
    this.taskIds = taskIds;
    this.lastUpdated = lastUpdated;
    setLastUpdatedIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ThriftChangesRequest(ThriftChangesRequest other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetCommonData()) {
      this.commonData = new kz.pnhz.mobile.thrift.generated.ThriftRequestBase(other.commonData);
    }
    if (other.isSetTaskIds()) {
      java.util.List<java.lang.String> __this__taskIds = new java.util.ArrayList<java.lang.String>(other.taskIds);
      this.taskIds = __this__taskIds;
    }
    this.lastUpdated = other.lastUpdated;
  }

  public ThriftChangesRequest deepCopy() {
    return new ThriftChangesRequest(this);
  }

  @Override
  public void clear() {
    this.commonData = null;
    this.taskIds = null;
    setLastUpdatedIsSet(false);
    this.lastUpdated = 0;
  }

  public kz.pnhz.mobile.thrift.generated.ThriftRequestBase getCommonData() {
    return this.commonData;
  }

  public ThriftChangesRequest setCommonData(kz.pnhz.mobile.thrift.generated.ThriftRequestBase commonData) {
    this.commonData = commonData;
    return this;
  }

  public void unsetCommonData() {
    this.commonData = null;
  }

  /** Returns true if field commonData is set (has been assigned a value) and false otherwise */
  public boolean isSetCommonData() {
    return this.commonData != null;
  }

  public void setCommonDataIsSet(boolean value) {
    if (!value) {
      this.commonData = null;
    }
  }

  public int getTaskIdsSize() {
    return (this.taskIds == null) ? 0 : this.taskIds.size();
  }

  public java.util.Iterator<java.lang.String> getTaskIdsIterator() {
    return (this.taskIds == null) ? null : this.taskIds.iterator();
  }

  public void addToTaskIds(java.lang.String elem) {
    if (this.taskIds == null) {
      this.taskIds = new java.util.ArrayList<java.lang.String>();
    }
    this.taskIds.add(elem);
  }

  public java.util.List<java.lang.String> getTaskIds() {
    return this.taskIds;
  }

  public ThriftChangesRequest setTaskIds(java.util.List<java.lang.String> taskIds) {
    this.taskIds = taskIds;
    return this;
  }

  public void unsetTaskIds() {
    this.taskIds = null;
  }

  /** Returns true if field taskIds is set (has been assigned a value) and false otherwise */
  public boolean isSetTaskIds() {
    return this.taskIds != null;
  }

  public void setTaskIdsIsSet(boolean value) {
    if (!value) {
      this.taskIds = null;
    }
  }

  public long getLastUpdated() {
    return this.lastUpdated;
  }

  public ThriftChangesRequest setLastUpdated(long lastUpdated) {
    this.lastUpdated = lastUpdated;
    setLastUpdatedIsSet(true);
    return this;
  }

  public void unsetLastUpdated() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __LASTUPDATED_ISSET_ID);
  }

  /** Returns true if field lastUpdated is set (has been assigned a value) and false otherwise */
  public boolean isSetLastUpdated() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __LASTUPDATED_ISSET_ID);
  }

  public void setLastUpdatedIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __LASTUPDATED_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
    case COMMON_DATA:
      if (value == null) {
        unsetCommonData();
      } else {
        setCommonData((kz.pnhz.mobile.thrift.generated.ThriftRequestBase)value);
      }
      break;

    case TASK_IDS:
      if (value == null) {
        unsetTaskIds();
      } else {
        setTaskIds((java.util.List<java.lang.String>)value);
      }
      break;

    case LAST_UPDATED:
      if (value == null) {
        unsetLastUpdated();
      } else {
        setLastUpdated((java.lang.Long)value);
      }
      break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case COMMON_DATA:
      return getCommonData();

    case TASK_IDS:
      return getTaskIds();

    case LAST_UPDATED:
      return getLastUpdated();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case COMMON_DATA:
      return isSetCommonData();
    case TASK_IDS:
      return isSetTaskIds();
    case LAST_UPDATED:
      return isSetLastUpdated();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof ThriftChangesRequest)
      return this.equals((ThriftChangesRequest)that);
    return false;
  }

  public boolean equals(ThriftChangesRequest that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_commonData = true && this.isSetCommonData();
    boolean that_present_commonData = true && that.isSetCommonData();
    if (this_present_commonData || that_present_commonData) {
      if (!(this_present_commonData && that_present_commonData))
        return false;
      if (!this.commonData.equals(that.commonData))
        return false;
    }

    boolean this_present_taskIds = true && this.isSetTaskIds();
    boolean that_present_taskIds = true && that.isSetTaskIds();
    if (this_present_taskIds || that_present_taskIds) {
      if (!(this_present_taskIds && that_present_taskIds))
        return false;
      if (!this.taskIds.equals(that.taskIds))
        return false;
    }

    boolean this_present_lastUpdated = true;
    boolean that_present_lastUpdated = true;
    if (this_present_lastUpdated || that_present_lastUpdated) {
      if (!(this_present_lastUpdated && that_present_lastUpdated))
        return false;
      if (this.lastUpdated != that.lastUpdated)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetCommonData()) ? 131071 : 524287);
    if (isSetCommonData())
      hashCode = hashCode * 8191 + commonData.hashCode();

    hashCode = hashCode * 8191 + ((isSetTaskIds()) ? 131071 : 524287);
    if (isSetTaskIds())
      hashCode = hashCode * 8191 + taskIds.hashCode();

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(lastUpdated);

    return hashCode;
  }

  @Override
  public int compareTo(ThriftChangesRequest other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetCommonData()).compareTo(other.isSetCommonData());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCommonData()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.commonData, other.commonData);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetTaskIds()).compareTo(other.isSetTaskIds());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTaskIds()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.taskIds, other.taskIds);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetLastUpdated()).compareTo(other.isSetLastUpdated());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLastUpdated()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lastUpdated, other.lastUpdated);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("ThriftChangesRequest(");
    boolean first = true;

    sb.append("commonData:");
    if (this.commonData == null) {
      sb.append("null");
    } else {
      sb.append(this.commonData);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("taskIds:");
    if (this.taskIds == null) {
      sb.append("null");
    } else {
      sb.append(this.taskIds);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("lastUpdated:");
    sb.append(this.lastUpdated);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (commonData != null) {
      commonData.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ThriftChangesRequestStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public ThriftChangesRequestStandardScheme getScheme() {
      return new ThriftChangesRequestStandardScheme();
    }
  }

  private static class ThriftChangesRequestStandardScheme extends org.apache.thrift.scheme.StandardScheme<ThriftChangesRequest> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ThriftChangesRequest struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // COMMON_DATA
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.commonData = new kz.pnhz.mobile.thrift.generated.ThriftRequestBase();
              struct.commonData.read(iprot);
              struct.setCommonDataIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // TASK_IDS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list40 = iprot.readListBegin();
                struct.taskIds = new java.util.ArrayList<java.lang.String>(_list40.size);
                java.lang.String _elem41;
                for (int _i42 = 0; _i42 < _list40.size; ++_i42)
                {
                  _elem41 = iprot.readString();
                  struct.taskIds.add(_elem41);
                }
                iprot.readListEnd();
              }
              struct.setTaskIdsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // LAST_UPDATED
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.lastUpdated = iprot.readI64();
              struct.setLastUpdatedIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ThriftChangesRequest struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.commonData != null) {
        oprot.writeFieldBegin(COMMON_DATA_FIELD_DESC);
        struct.commonData.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.taskIds != null) {
        oprot.writeFieldBegin(TASK_IDS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.taskIds.size()));
          for (java.lang.String _iter43 : struct.taskIds)
          {
            oprot.writeString(_iter43);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(LAST_UPDATED_FIELD_DESC);
      oprot.writeI64(struct.lastUpdated);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ThriftChangesRequestTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public ThriftChangesRequestTupleScheme getScheme() {
      return new ThriftChangesRequestTupleScheme();
    }
  }

  private static class ThriftChangesRequestTupleScheme extends org.apache.thrift.scheme.TupleScheme<ThriftChangesRequest> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ThriftChangesRequest struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetCommonData()) {
        optionals.set(0);
      }
      if (struct.isSetTaskIds()) {
        optionals.set(1);
      }
      if (struct.isSetLastUpdated()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.isSetCommonData()) {
        struct.commonData.write(oprot);
      }
      if (struct.isSetTaskIds()) {
        {
          oprot.writeI32(struct.taskIds.size());
          for (java.lang.String _iter44 : struct.taskIds)
          {
            oprot.writeString(_iter44);
          }
        }
      }
      if (struct.isSetLastUpdated()) {
        oprot.writeI64(struct.lastUpdated);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ThriftChangesRequest struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        struct.commonData = new kz.pnhz.mobile.thrift.generated.ThriftRequestBase();
        struct.commonData.read(iprot);
        struct.setCommonDataIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TList _list45 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.taskIds = new java.util.ArrayList<java.lang.String>(_list45.size);
          java.lang.String _elem46;
          for (int _i47 = 0; _i47 < _list45.size; ++_i47)
          {
            _elem46 = iprot.readString();
            struct.taskIds.add(_elem46);
          }
        }
        struct.setTaskIdsIsSet(true);
      }
      if (incoming.get(2)) {
        struct.lastUpdated = iprot.readI64();
        struct.setLastUpdatedIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

