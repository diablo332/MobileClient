/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package kz.pnhz.iserver.thrift.generated;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.10.0)", date = "2017-10-15")
public class ThriftStandardActionRequest implements org.apache.thrift.TBase<ThriftStandardActionRequest, ThriftStandardActionRequest._Fields>, java.io.Serializable, Cloneable, Comparable<ThriftStandardActionRequest> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ThriftStandardActionRequest");

  private static final org.apache.thrift.protocol.TField COMMON_DATA_FIELD_DESC = new org.apache.thrift.protocol.TField("commonData", org.apache.thrift.protocol.TType.STRUCT, (short)1);
  private static final org.apache.thrift.protocol.TField COMPOSITE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("compositeId", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField ACTION_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("actionCode", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField COMMENT_FIELD_DESC = new org.apache.thrift.protocol.TField("comment", org.apache.thrift.protocol.TType.STRING, (short)4);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new ThriftStandardActionRequestStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new ThriftStandardActionRequestTupleSchemeFactory();

  public kz.pnhz.mobile.thrift.generated.ThriftRequestBase commonData; // required
  public java.lang.String compositeId; // required
  public java.lang.String actionCode; // required
  public java.lang.String comment; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    COMMON_DATA((short)1, "commonData"),
    COMPOSITE_ID((short)2, "compositeId"),
    ACTION_CODE((short)3, "actionCode"),
    COMMENT((short)4, "comment");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // COMMON_DATA
          return COMMON_DATA;
        case 2: // COMPOSITE_ID
          return COMPOSITE_ID;
        case 3: // ACTION_CODE
          return ACTION_CODE;
        case 4: // COMMENT
          return COMMENT;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.COMMON_DATA, new org.apache.thrift.meta_data.FieldMetaData("commonData", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, kz.pnhz.mobile.thrift.generated.ThriftRequestBase.class)));
    tmpMap.put(_Fields.COMPOSITE_ID, new org.apache.thrift.meta_data.FieldMetaData("compositeId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ACTION_CODE, new org.apache.thrift.meta_data.FieldMetaData("actionCode", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.COMMENT, new org.apache.thrift.meta_data.FieldMetaData("comment", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ThriftStandardActionRequest.class, metaDataMap);
  }

  public ThriftStandardActionRequest() {
  }

  public ThriftStandardActionRequest(
    kz.pnhz.mobile.thrift.generated.ThriftRequestBase commonData,
    java.lang.String compositeId,
    java.lang.String actionCode,
    java.lang.String comment)
  {
    this();
    this.commonData = commonData;
    this.compositeId = compositeId;
    this.actionCode = actionCode;
    this.comment = comment;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ThriftStandardActionRequest(ThriftStandardActionRequest other) {
    if (other.isSetCommonData()) {
      this.commonData = new kz.pnhz.mobile.thrift.generated.ThriftRequestBase(other.commonData);
    }
    if (other.isSetCompositeId()) {
      this.compositeId = other.compositeId;
    }
    if (other.isSetActionCode()) {
      this.actionCode = other.actionCode;
    }
    if (other.isSetComment()) {
      this.comment = other.comment;
    }
  }

  public ThriftStandardActionRequest deepCopy() {
    return new ThriftStandardActionRequest(this);
  }

  @Override
  public void clear() {
    this.commonData = null;
    this.compositeId = null;
    this.actionCode = null;
    this.comment = null;
  }

  public kz.pnhz.mobile.thrift.generated.ThriftRequestBase getCommonData() {
    return this.commonData;
  }

  public ThriftStandardActionRequest setCommonData(kz.pnhz.mobile.thrift.generated.ThriftRequestBase commonData) {
    this.commonData = commonData;
    return this;
  }

  public void unsetCommonData() {
    this.commonData = null;
  }

  /** Returns true if field commonData is set (has been assigned a value) and false otherwise */
  public boolean isSetCommonData() {
    return this.commonData != null;
  }

  public void setCommonDataIsSet(boolean value) {
    if (!value) {
      this.commonData = null;
    }
  }

  public java.lang.String getCompositeId() {
    return this.compositeId;
  }

  public ThriftStandardActionRequest setCompositeId(java.lang.String compositeId) {
    this.compositeId = compositeId;
    return this;
  }

  public void unsetCompositeId() {
    this.compositeId = null;
  }

  /** Returns true if field compositeId is set (has been assigned a value) and false otherwise */
  public boolean isSetCompositeId() {
    return this.compositeId != null;
  }

  public void setCompositeIdIsSet(boolean value) {
    if (!value) {
      this.compositeId = null;
    }
  }

  public java.lang.String getActionCode() {
    return this.actionCode;
  }

  public ThriftStandardActionRequest setActionCode(java.lang.String actionCode) {
    this.actionCode = actionCode;
    return this;
  }

  public void unsetActionCode() {
    this.actionCode = null;
  }

  /** Returns true if field actionCode is set (has been assigned a value) and false otherwise */
  public boolean isSetActionCode() {
    return this.actionCode != null;
  }

  public void setActionCodeIsSet(boolean value) {
    if (!value) {
      this.actionCode = null;
    }
  }

  public java.lang.String getComment() {
    return this.comment;
  }

  public ThriftStandardActionRequest setComment(java.lang.String comment) {
    this.comment = comment;
    return this;
  }

  public void unsetComment() {
    this.comment = null;
  }

  /** Returns true if field comment is set (has been assigned a value) and false otherwise */
  public boolean isSetComment() {
    return this.comment != null;
  }

  public void setCommentIsSet(boolean value) {
    if (!value) {
      this.comment = null;
    }
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
    case COMMON_DATA:
      if (value == null) {
        unsetCommonData();
      } else {
        setCommonData((kz.pnhz.mobile.thrift.generated.ThriftRequestBase)value);
      }
      break;

    case COMPOSITE_ID:
      if (value == null) {
        unsetCompositeId();
      } else {
        setCompositeId((java.lang.String)value);
      }
      break;

    case ACTION_CODE:
      if (value == null) {
        unsetActionCode();
      } else {
        setActionCode((java.lang.String)value);
      }
      break;

    case COMMENT:
      if (value == null) {
        unsetComment();
      } else {
        setComment((java.lang.String)value);
      }
      break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case COMMON_DATA:
      return getCommonData();

    case COMPOSITE_ID:
      return getCompositeId();

    case ACTION_CODE:
      return getActionCode();

    case COMMENT:
      return getComment();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case COMMON_DATA:
      return isSetCommonData();
    case COMPOSITE_ID:
      return isSetCompositeId();
    case ACTION_CODE:
      return isSetActionCode();
    case COMMENT:
      return isSetComment();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof ThriftStandardActionRequest)
      return this.equals((ThriftStandardActionRequest)that);
    return false;
  }

  public boolean equals(ThriftStandardActionRequest that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_commonData = true && this.isSetCommonData();
    boolean that_present_commonData = true && that.isSetCommonData();
    if (this_present_commonData || that_present_commonData) {
      if (!(this_present_commonData && that_present_commonData))
        return false;
      if (!this.commonData.equals(that.commonData))
        return false;
    }

    boolean this_present_compositeId = true && this.isSetCompositeId();
    boolean that_present_compositeId = true && that.isSetCompositeId();
    if (this_present_compositeId || that_present_compositeId) {
      if (!(this_present_compositeId && that_present_compositeId))
        return false;
      if (!this.compositeId.equals(that.compositeId))
        return false;
    }

    boolean this_present_actionCode = true && this.isSetActionCode();
    boolean that_present_actionCode = true && that.isSetActionCode();
    if (this_present_actionCode || that_present_actionCode) {
      if (!(this_present_actionCode && that_present_actionCode))
        return false;
      if (!this.actionCode.equals(that.actionCode))
        return false;
    }

    boolean this_present_comment = true && this.isSetComment();
    boolean that_present_comment = true && that.isSetComment();
    if (this_present_comment || that_present_comment) {
      if (!(this_present_comment && that_present_comment))
        return false;
      if (!this.comment.equals(that.comment))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetCommonData()) ? 131071 : 524287);
    if (isSetCommonData())
      hashCode = hashCode * 8191 + commonData.hashCode();

    hashCode = hashCode * 8191 + ((isSetCompositeId()) ? 131071 : 524287);
    if (isSetCompositeId())
      hashCode = hashCode * 8191 + compositeId.hashCode();

    hashCode = hashCode * 8191 + ((isSetActionCode()) ? 131071 : 524287);
    if (isSetActionCode())
      hashCode = hashCode * 8191 + actionCode.hashCode();

    hashCode = hashCode * 8191 + ((isSetComment()) ? 131071 : 524287);
    if (isSetComment())
      hashCode = hashCode * 8191 + comment.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(ThriftStandardActionRequest other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetCommonData()).compareTo(other.isSetCommonData());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCommonData()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.commonData, other.commonData);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetCompositeId()).compareTo(other.isSetCompositeId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCompositeId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.compositeId, other.compositeId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetActionCode()).compareTo(other.isSetActionCode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetActionCode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.actionCode, other.actionCode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetComment()).compareTo(other.isSetComment());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetComment()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.comment, other.comment);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("ThriftStandardActionRequest(");
    boolean first = true;

    sb.append("commonData:");
    if (this.commonData == null) {
      sb.append("null");
    } else {
      sb.append(this.commonData);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("compositeId:");
    if (this.compositeId == null) {
      sb.append("null");
    } else {
      sb.append(this.compositeId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("actionCode:");
    if (this.actionCode == null) {
      sb.append("null");
    } else {
      sb.append(this.actionCode);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("comment:");
    if (this.comment == null) {
      sb.append("null");
    } else {
      sb.append(this.comment);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (commonData != null) {
      commonData.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ThriftStandardActionRequestStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public ThriftStandardActionRequestStandardScheme getScheme() {
      return new ThriftStandardActionRequestStandardScheme();
    }
  }

  private static class ThriftStandardActionRequestStandardScheme extends org.apache.thrift.scheme.StandardScheme<ThriftStandardActionRequest> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ThriftStandardActionRequest struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // COMMON_DATA
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.commonData = new kz.pnhz.mobile.thrift.generated.ThriftRequestBase();
              struct.commonData.read(iprot);
              struct.setCommonDataIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // COMPOSITE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.compositeId = iprot.readString();
              struct.setCompositeIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // ACTION_CODE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.actionCode = iprot.readString();
              struct.setActionCodeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // COMMENT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.comment = iprot.readString();
              struct.setCommentIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ThriftStandardActionRequest struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.commonData != null) {
        oprot.writeFieldBegin(COMMON_DATA_FIELD_DESC);
        struct.commonData.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.compositeId != null) {
        oprot.writeFieldBegin(COMPOSITE_ID_FIELD_DESC);
        oprot.writeString(struct.compositeId);
        oprot.writeFieldEnd();
      }
      if (struct.actionCode != null) {
        oprot.writeFieldBegin(ACTION_CODE_FIELD_DESC);
        oprot.writeString(struct.actionCode);
        oprot.writeFieldEnd();
      }
      if (struct.comment != null) {
        oprot.writeFieldBegin(COMMENT_FIELD_DESC);
        oprot.writeString(struct.comment);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ThriftStandardActionRequestTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public ThriftStandardActionRequestTupleScheme getScheme() {
      return new ThriftStandardActionRequestTupleScheme();
    }
  }

  private static class ThriftStandardActionRequestTupleScheme extends org.apache.thrift.scheme.TupleScheme<ThriftStandardActionRequest> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ThriftStandardActionRequest struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetCommonData()) {
        optionals.set(0);
      }
      if (struct.isSetCompositeId()) {
        optionals.set(1);
      }
      if (struct.isSetActionCode()) {
        optionals.set(2);
      }
      if (struct.isSetComment()) {
        optionals.set(3);
      }
      oprot.writeBitSet(optionals, 4);
      if (struct.isSetCommonData()) {
        struct.commonData.write(oprot);
      }
      if (struct.isSetCompositeId()) {
        oprot.writeString(struct.compositeId);
      }
      if (struct.isSetActionCode()) {
        oprot.writeString(struct.actionCode);
      }
      if (struct.isSetComment()) {
        oprot.writeString(struct.comment);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ThriftStandardActionRequest struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(4);
      if (incoming.get(0)) {
        struct.commonData = new kz.pnhz.mobile.thrift.generated.ThriftRequestBase();
        struct.commonData.read(iprot);
        struct.setCommonDataIsSet(true);
      }
      if (incoming.get(1)) {
        struct.compositeId = iprot.readString();
        struct.setCompositeIdIsSet(true);
      }
      if (incoming.get(2)) {
        struct.actionCode = iprot.readString();
        struct.setActionCodeIsSet(true);
      }
      if (incoming.get(3)) {
        struct.comment = iprot.readString();
        struct.setCommentIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

