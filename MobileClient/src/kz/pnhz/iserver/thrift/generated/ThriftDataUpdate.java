/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package kz.pnhz.iserver.thrift.generated;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.10.0)", date = "2017-10-15")
public class ThriftDataUpdate implements org.apache.thrift.TBase<ThriftDataUpdate, ThriftDataUpdate._Fields>, java.io.Serializable, Cloneable, Comparable<ThriftDataUpdate> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ThriftDataUpdate");

  private static final org.apache.thrift.protocol.TField ACTIVE_TASKS_FIELD_DESC = new org.apache.thrift.protocol.TField("activeTasks", org.apache.thrift.protocol.TType.LIST, (short)1);
  private static final org.apache.thrift.protocol.TField ACTIVE_EMPLOYEES_FIELD_DESC = new org.apache.thrift.protocol.TField("activeEmployees", org.apache.thrift.protocol.TType.LIST, (short)2);
  private static final org.apache.thrift.protocol.TField DELETED_TASKS_FIELD_DESC = new org.apache.thrift.protocol.TField("deletedTasks", org.apache.thrift.protocol.TType.LIST, (short)3);
  private static final org.apache.thrift.protocol.TField DELETED_EMPLOYEES_FIELD_DESC = new org.apache.thrift.protocol.TField("deletedEmployees", org.apache.thrift.protocol.TType.LIST, (short)4);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new ThriftDataUpdateStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new ThriftDataUpdateTupleSchemeFactory();

  public java.util.List<ThriftTaskHeader> activeTasks; // required
  public java.util.List<ThriftEmployee> activeEmployees; // required
  public java.util.List<java.lang.String> deletedTasks; // required
  public java.util.List<java.lang.String> deletedEmployees; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ACTIVE_TASKS((short)1, "activeTasks"),
    ACTIVE_EMPLOYEES((short)2, "activeEmployees"),
    DELETED_TASKS((short)3, "deletedTasks"),
    DELETED_EMPLOYEES((short)4, "deletedEmployees");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ACTIVE_TASKS
          return ACTIVE_TASKS;
        case 2: // ACTIVE_EMPLOYEES
          return ACTIVE_EMPLOYEES;
        case 3: // DELETED_TASKS
          return DELETED_TASKS;
        case 4: // DELETED_EMPLOYEES
          return DELETED_EMPLOYEES;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ACTIVE_TASKS, new org.apache.thrift.meta_data.FieldMetaData("activeTasks", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ThriftTaskHeader.class))));
    tmpMap.put(_Fields.ACTIVE_EMPLOYEES, new org.apache.thrift.meta_data.FieldMetaData("activeEmployees", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ThriftEmployee.class))));
    tmpMap.put(_Fields.DELETED_TASKS, new org.apache.thrift.meta_data.FieldMetaData("deletedTasks", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.DELETED_EMPLOYEES, new org.apache.thrift.meta_data.FieldMetaData("deletedEmployees", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ThriftDataUpdate.class, metaDataMap);
  }

  public ThriftDataUpdate() {
  }

  public ThriftDataUpdate(
    java.util.List<ThriftTaskHeader> activeTasks,
    java.util.List<ThriftEmployee> activeEmployees,
    java.util.List<java.lang.String> deletedTasks,
    java.util.List<java.lang.String> deletedEmployees)
  {
    this();
    this.activeTasks = activeTasks;
    this.activeEmployees = activeEmployees;
    this.deletedTasks = deletedTasks;
    this.deletedEmployees = deletedEmployees;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ThriftDataUpdate(ThriftDataUpdate other) {
    if (other.isSetActiveTasks()) {
      java.util.List<ThriftTaskHeader> __this__activeTasks = new java.util.ArrayList<ThriftTaskHeader>(other.activeTasks.size());
      for (ThriftTaskHeader other_element : other.activeTasks) {
        __this__activeTasks.add(new ThriftTaskHeader(other_element));
      }
      this.activeTasks = __this__activeTasks;
    }
    if (other.isSetActiveEmployees()) {
      java.util.List<ThriftEmployee> __this__activeEmployees = new java.util.ArrayList<ThriftEmployee>(other.activeEmployees.size());
      for (ThriftEmployee other_element : other.activeEmployees) {
        __this__activeEmployees.add(new ThriftEmployee(other_element));
      }
      this.activeEmployees = __this__activeEmployees;
    }
    if (other.isSetDeletedTasks()) {
      java.util.List<java.lang.String> __this__deletedTasks = new java.util.ArrayList<java.lang.String>(other.deletedTasks);
      this.deletedTasks = __this__deletedTasks;
    }
    if (other.isSetDeletedEmployees()) {
      java.util.List<java.lang.String> __this__deletedEmployees = new java.util.ArrayList<java.lang.String>(other.deletedEmployees);
      this.deletedEmployees = __this__deletedEmployees;
    }
  }

  public ThriftDataUpdate deepCopy() {
    return new ThriftDataUpdate(this);
  }

  @Override
  public void clear() {
    this.activeTasks = null;
    this.activeEmployees = null;
    this.deletedTasks = null;
    this.deletedEmployees = null;
  }

  public int getActiveTasksSize() {
    return (this.activeTasks == null) ? 0 : this.activeTasks.size();
  }

  public java.util.Iterator<ThriftTaskHeader> getActiveTasksIterator() {
    return (this.activeTasks == null) ? null : this.activeTasks.iterator();
  }

  public void addToActiveTasks(ThriftTaskHeader elem) {
    if (this.activeTasks == null) {
      this.activeTasks = new java.util.ArrayList<ThriftTaskHeader>();
    }
    this.activeTasks.add(elem);
  }

  public java.util.List<ThriftTaskHeader> getActiveTasks() {
    return this.activeTasks;
  }

  public ThriftDataUpdate setActiveTasks(java.util.List<ThriftTaskHeader> activeTasks) {
    this.activeTasks = activeTasks;
    return this;
  }

  public void unsetActiveTasks() {
    this.activeTasks = null;
  }

  /** Returns true if field activeTasks is set (has been assigned a value) and false otherwise */
  public boolean isSetActiveTasks() {
    return this.activeTasks != null;
  }

  public void setActiveTasksIsSet(boolean value) {
    if (!value) {
      this.activeTasks = null;
    }
  }

  public int getActiveEmployeesSize() {
    return (this.activeEmployees == null) ? 0 : this.activeEmployees.size();
  }

  public java.util.Iterator<ThriftEmployee> getActiveEmployeesIterator() {
    return (this.activeEmployees == null) ? null : this.activeEmployees.iterator();
  }

  public void addToActiveEmployees(ThriftEmployee elem) {
    if (this.activeEmployees == null) {
      this.activeEmployees = new java.util.ArrayList<ThriftEmployee>();
    }
    this.activeEmployees.add(elem);
  }

  public java.util.List<ThriftEmployee> getActiveEmployees() {
    return this.activeEmployees;
  }

  public ThriftDataUpdate setActiveEmployees(java.util.List<ThriftEmployee> activeEmployees) {
    this.activeEmployees = activeEmployees;
    return this;
  }

  public void unsetActiveEmployees() {
    this.activeEmployees = null;
  }

  /** Returns true if field activeEmployees is set (has been assigned a value) and false otherwise */
  public boolean isSetActiveEmployees() {
    return this.activeEmployees != null;
  }

  public void setActiveEmployeesIsSet(boolean value) {
    if (!value) {
      this.activeEmployees = null;
    }
  }

  public int getDeletedTasksSize() {
    return (this.deletedTasks == null) ? 0 : this.deletedTasks.size();
  }

  public java.util.Iterator<java.lang.String> getDeletedTasksIterator() {
    return (this.deletedTasks == null) ? null : this.deletedTasks.iterator();
  }

  public void addToDeletedTasks(java.lang.String elem) {
    if (this.deletedTasks == null) {
      this.deletedTasks = new java.util.ArrayList<java.lang.String>();
    }
    this.deletedTasks.add(elem);
  }

  public java.util.List<java.lang.String> getDeletedTasks() {
    return this.deletedTasks;
  }

  public ThriftDataUpdate setDeletedTasks(java.util.List<java.lang.String> deletedTasks) {
    this.deletedTasks = deletedTasks;
    return this;
  }

  public void unsetDeletedTasks() {
    this.deletedTasks = null;
  }

  /** Returns true if field deletedTasks is set (has been assigned a value) and false otherwise */
  public boolean isSetDeletedTasks() {
    return this.deletedTasks != null;
  }

  public void setDeletedTasksIsSet(boolean value) {
    if (!value) {
      this.deletedTasks = null;
    }
  }

  public int getDeletedEmployeesSize() {
    return (this.deletedEmployees == null) ? 0 : this.deletedEmployees.size();
  }

  public java.util.Iterator<java.lang.String> getDeletedEmployeesIterator() {
    return (this.deletedEmployees == null) ? null : this.deletedEmployees.iterator();
  }

  public void addToDeletedEmployees(java.lang.String elem) {
    if (this.deletedEmployees == null) {
      this.deletedEmployees = new java.util.ArrayList<java.lang.String>();
    }
    this.deletedEmployees.add(elem);
  }

  public java.util.List<java.lang.String> getDeletedEmployees() {
    return this.deletedEmployees;
  }

  public ThriftDataUpdate setDeletedEmployees(java.util.List<java.lang.String> deletedEmployees) {
    this.deletedEmployees = deletedEmployees;
    return this;
  }

  public void unsetDeletedEmployees() {
    this.deletedEmployees = null;
  }

  /** Returns true if field deletedEmployees is set (has been assigned a value) and false otherwise */
  public boolean isSetDeletedEmployees() {
    return this.deletedEmployees != null;
  }

  public void setDeletedEmployeesIsSet(boolean value) {
    if (!value) {
      this.deletedEmployees = null;
    }
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
    case ACTIVE_TASKS:
      if (value == null) {
        unsetActiveTasks();
      } else {
        setActiveTasks((java.util.List<ThriftTaskHeader>)value);
      }
      break;

    case ACTIVE_EMPLOYEES:
      if (value == null) {
        unsetActiveEmployees();
      } else {
        setActiveEmployees((java.util.List<ThriftEmployee>)value);
      }
      break;

    case DELETED_TASKS:
      if (value == null) {
        unsetDeletedTasks();
      } else {
        setDeletedTasks((java.util.List<java.lang.String>)value);
      }
      break;

    case DELETED_EMPLOYEES:
      if (value == null) {
        unsetDeletedEmployees();
      } else {
        setDeletedEmployees((java.util.List<java.lang.String>)value);
      }
      break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case ACTIVE_TASKS:
      return getActiveTasks();

    case ACTIVE_EMPLOYEES:
      return getActiveEmployees();

    case DELETED_TASKS:
      return getDeletedTasks();

    case DELETED_EMPLOYEES:
      return getDeletedEmployees();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case ACTIVE_TASKS:
      return isSetActiveTasks();
    case ACTIVE_EMPLOYEES:
      return isSetActiveEmployees();
    case DELETED_TASKS:
      return isSetDeletedTasks();
    case DELETED_EMPLOYEES:
      return isSetDeletedEmployees();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof ThriftDataUpdate)
      return this.equals((ThriftDataUpdate)that);
    return false;
  }

  public boolean equals(ThriftDataUpdate that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_activeTasks = true && this.isSetActiveTasks();
    boolean that_present_activeTasks = true && that.isSetActiveTasks();
    if (this_present_activeTasks || that_present_activeTasks) {
      if (!(this_present_activeTasks && that_present_activeTasks))
        return false;
      if (!this.activeTasks.equals(that.activeTasks))
        return false;
    }

    boolean this_present_activeEmployees = true && this.isSetActiveEmployees();
    boolean that_present_activeEmployees = true && that.isSetActiveEmployees();
    if (this_present_activeEmployees || that_present_activeEmployees) {
      if (!(this_present_activeEmployees && that_present_activeEmployees))
        return false;
      if (!this.activeEmployees.equals(that.activeEmployees))
        return false;
    }

    boolean this_present_deletedTasks = true && this.isSetDeletedTasks();
    boolean that_present_deletedTasks = true && that.isSetDeletedTasks();
    if (this_present_deletedTasks || that_present_deletedTasks) {
      if (!(this_present_deletedTasks && that_present_deletedTasks))
        return false;
      if (!this.deletedTasks.equals(that.deletedTasks))
        return false;
    }

    boolean this_present_deletedEmployees = true && this.isSetDeletedEmployees();
    boolean that_present_deletedEmployees = true && that.isSetDeletedEmployees();
    if (this_present_deletedEmployees || that_present_deletedEmployees) {
      if (!(this_present_deletedEmployees && that_present_deletedEmployees))
        return false;
      if (!this.deletedEmployees.equals(that.deletedEmployees))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetActiveTasks()) ? 131071 : 524287);
    if (isSetActiveTasks())
      hashCode = hashCode * 8191 + activeTasks.hashCode();

    hashCode = hashCode * 8191 + ((isSetActiveEmployees()) ? 131071 : 524287);
    if (isSetActiveEmployees())
      hashCode = hashCode * 8191 + activeEmployees.hashCode();

    hashCode = hashCode * 8191 + ((isSetDeletedTasks()) ? 131071 : 524287);
    if (isSetDeletedTasks())
      hashCode = hashCode * 8191 + deletedTasks.hashCode();

    hashCode = hashCode * 8191 + ((isSetDeletedEmployees()) ? 131071 : 524287);
    if (isSetDeletedEmployees())
      hashCode = hashCode * 8191 + deletedEmployees.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(ThriftDataUpdate other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetActiveTasks()).compareTo(other.isSetActiveTasks());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetActiveTasks()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.activeTasks, other.activeTasks);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetActiveEmployees()).compareTo(other.isSetActiveEmployees());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetActiveEmployees()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.activeEmployees, other.activeEmployees);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetDeletedTasks()).compareTo(other.isSetDeletedTasks());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDeletedTasks()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.deletedTasks, other.deletedTasks);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetDeletedEmployees()).compareTo(other.isSetDeletedEmployees());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDeletedEmployees()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.deletedEmployees, other.deletedEmployees);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("ThriftDataUpdate(");
    boolean first = true;

    sb.append("activeTasks:");
    if (this.activeTasks == null) {
      sb.append("null");
    } else {
      sb.append(this.activeTasks);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("activeEmployees:");
    if (this.activeEmployees == null) {
      sb.append("null");
    } else {
      sb.append(this.activeEmployees);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("deletedTasks:");
    if (this.deletedTasks == null) {
      sb.append("null");
    } else {
      sb.append(this.deletedTasks);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("deletedEmployees:");
    if (this.deletedEmployees == null) {
      sb.append("null");
    } else {
      sb.append(this.deletedEmployees);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ThriftDataUpdateStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public ThriftDataUpdateStandardScheme getScheme() {
      return new ThriftDataUpdateStandardScheme();
    }
  }

  private static class ThriftDataUpdateStandardScheme extends org.apache.thrift.scheme.StandardScheme<ThriftDataUpdate> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ThriftDataUpdate struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ACTIVE_TASKS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list48 = iprot.readListBegin();
                struct.activeTasks = new java.util.ArrayList<ThriftTaskHeader>(_list48.size);
                ThriftTaskHeader _elem49;
                for (int _i50 = 0; _i50 < _list48.size; ++_i50)
                {
                  _elem49 = new ThriftTaskHeader();
                  _elem49.read(iprot);
                  struct.activeTasks.add(_elem49);
                }
                iprot.readListEnd();
              }
              struct.setActiveTasksIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // ACTIVE_EMPLOYEES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list51 = iprot.readListBegin();
                struct.activeEmployees = new java.util.ArrayList<ThriftEmployee>(_list51.size);
                ThriftEmployee _elem52;
                for (int _i53 = 0; _i53 < _list51.size; ++_i53)
                {
                  _elem52 = new ThriftEmployee();
                  _elem52.read(iprot);
                  struct.activeEmployees.add(_elem52);
                }
                iprot.readListEnd();
              }
              struct.setActiveEmployeesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // DELETED_TASKS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list54 = iprot.readListBegin();
                struct.deletedTasks = new java.util.ArrayList<java.lang.String>(_list54.size);
                java.lang.String _elem55;
                for (int _i56 = 0; _i56 < _list54.size; ++_i56)
                {
                  _elem55 = iprot.readString();
                  struct.deletedTasks.add(_elem55);
                }
                iprot.readListEnd();
              }
              struct.setDeletedTasksIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // DELETED_EMPLOYEES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list57 = iprot.readListBegin();
                struct.deletedEmployees = new java.util.ArrayList<java.lang.String>(_list57.size);
                java.lang.String _elem58;
                for (int _i59 = 0; _i59 < _list57.size; ++_i59)
                {
                  _elem58 = iprot.readString();
                  struct.deletedEmployees.add(_elem58);
                }
                iprot.readListEnd();
              }
              struct.setDeletedEmployeesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ThriftDataUpdate struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.activeTasks != null) {
        oprot.writeFieldBegin(ACTIVE_TASKS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.activeTasks.size()));
          for (ThriftTaskHeader _iter60 : struct.activeTasks)
          {
            _iter60.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.activeEmployees != null) {
        oprot.writeFieldBegin(ACTIVE_EMPLOYEES_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.activeEmployees.size()));
          for (ThriftEmployee _iter61 : struct.activeEmployees)
          {
            _iter61.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.deletedTasks != null) {
        oprot.writeFieldBegin(DELETED_TASKS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.deletedTasks.size()));
          for (java.lang.String _iter62 : struct.deletedTasks)
          {
            oprot.writeString(_iter62);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.deletedEmployees != null) {
        oprot.writeFieldBegin(DELETED_EMPLOYEES_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.deletedEmployees.size()));
          for (java.lang.String _iter63 : struct.deletedEmployees)
          {
            oprot.writeString(_iter63);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ThriftDataUpdateTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public ThriftDataUpdateTupleScheme getScheme() {
      return new ThriftDataUpdateTupleScheme();
    }
  }

  private static class ThriftDataUpdateTupleScheme extends org.apache.thrift.scheme.TupleScheme<ThriftDataUpdate> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ThriftDataUpdate struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetActiveTasks()) {
        optionals.set(0);
      }
      if (struct.isSetActiveEmployees()) {
        optionals.set(1);
      }
      if (struct.isSetDeletedTasks()) {
        optionals.set(2);
      }
      if (struct.isSetDeletedEmployees()) {
        optionals.set(3);
      }
      oprot.writeBitSet(optionals, 4);
      if (struct.isSetActiveTasks()) {
        {
          oprot.writeI32(struct.activeTasks.size());
          for (ThriftTaskHeader _iter64 : struct.activeTasks)
          {
            _iter64.write(oprot);
          }
        }
      }
      if (struct.isSetActiveEmployees()) {
        {
          oprot.writeI32(struct.activeEmployees.size());
          for (ThriftEmployee _iter65 : struct.activeEmployees)
          {
            _iter65.write(oprot);
          }
        }
      }
      if (struct.isSetDeletedTasks()) {
        {
          oprot.writeI32(struct.deletedTasks.size());
          for (java.lang.String _iter66 : struct.deletedTasks)
          {
            oprot.writeString(_iter66);
          }
        }
      }
      if (struct.isSetDeletedEmployees()) {
        {
          oprot.writeI32(struct.deletedEmployees.size());
          for (java.lang.String _iter67 : struct.deletedEmployees)
          {
            oprot.writeString(_iter67);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ThriftDataUpdate struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(4);
      if (incoming.get(0)) {
        {
          org.apache.thrift.protocol.TList _list68 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.activeTasks = new java.util.ArrayList<ThriftTaskHeader>(_list68.size);
          ThriftTaskHeader _elem69;
          for (int _i70 = 0; _i70 < _list68.size; ++_i70)
          {
            _elem69 = new ThriftTaskHeader();
            _elem69.read(iprot);
            struct.activeTasks.add(_elem69);
          }
        }
        struct.setActiveTasksIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TList _list71 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.activeEmployees = new java.util.ArrayList<ThriftEmployee>(_list71.size);
          ThriftEmployee _elem72;
          for (int _i73 = 0; _i73 < _list71.size; ++_i73)
          {
            _elem72 = new ThriftEmployee();
            _elem72.read(iprot);
            struct.activeEmployees.add(_elem72);
          }
        }
        struct.setActiveEmployeesIsSet(true);
      }
      if (incoming.get(2)) {
        {
          org.apache.thrift.protocol.TList _list74 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.deletedTasks = new java.util.ArrayList<java.lang.String>(_list74.size);
          java.lang.String _elem75;
          for (int _i76 = 0; _i76 < _list74.size; ++_i76)
          {
            _elem75 = iprot.readString();
            struct.deletedTasks.add(_elem75);
          }
        }
        struct.setDeletedTasksIsSet(true);
      }
      if (incoming.get(3)) {
        {
          org.apache.thrift.protocol.TList _list77 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.deletedEmployees = new java.util.ArrayList<java.lang.String>(_list77.size);
          java.lang.String _elem78;
          for (int _i79 = 0; _i79 < _list77.size; ++_i79)
          {
            _elem78 = iprot.readString();
            struct.deletedEmployees.add(_elem78);
          }
        }
        struct.setDeletedEmployeesIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

