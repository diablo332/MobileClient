/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package kz.pnhz.mobile.thrift.generated;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.10.0)", date = "2017-10-15")
public class ThriftPingResponse implements org.apache.thrift.TBase<ThriftPingResponse, ThriftPingResponse._Fields>, java.io.Serializable, Cloneable, Comparable<ThriftPingResponse> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ThriftPingResponse");

  private static final org.apache.thrift.protocol.TField SERVER_TIMESTAMP_FIELD_DESC = new org.apache.thrift.protocol.TField("serverTimestamp", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField NEW_VERSION_AVAILABLE_FIELD_DESC = new org.apache.thrift.protocol.TField("newVersionAvailable", org.apache.thrift.protocol.TType.BOOL, (short)2);
  private static final org.apache.thrift.protocol.TField UPDATE_URL_FIELD_DESC = new org.apache.thrift.protocol.TField("updateUrl", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField UPDATE_MESSAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("updateMessage", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField SHOULD_CLEAN_CLIENT_DATA_FIELD_DESC = new org.apache.thrift.protocol.TField("shouldCleanClientData", org.apache.thrift.protocol.TType.BOOL, (short)5);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new ThriftPingResponseStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new ThriftPingResponseTupleSchemeFactory();

  public long serverTimestamp; // required
  public boolean newVersionAvailable; // required
  public java.lang.String updateUrl; // required
  public java.lang.String updateMessage; // required
  public boolean shouldCleanClientData; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    SERVER_TIMESTAMP((short)1, "serverTimestamp"),
    NEW_VERSION_AVAILABLE((short)2, "newVersionAvailable"),
    UPDATE_URL((short)3, "updateUrl"),
    UPDATE_MESSAGE((short)4, "updateMessage"),
    SHOULD_CLEAN_CLIENT_DATA((short)5, "shouldCleanClientData");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // SERVER_TIMESTAMP
          return SERVER_TIMESTAMP;
        case 2: // NEW_VERSION_AVAILABLE
          return NEW_VERSION_AVAILABLE;
        case 3: // UPDATE_URL
          return UPDATE_URL;
        case 4: // UPDATE_MESSAGE
          return UPDATE_MESSAGE;
        case 5: // SHOULD_CLEAN_CLIENT_DATA
          return SHOULD_CLEAN_CLIENT_DATA;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __SERVERTIMESTAMP_ISSET_ID = 0;
  private static final int __NEWVERSIONAVAILABLE_ISSET_ID = 1;
  private static final int __SHOULDCLEANCLIENTDATA_ISSET_ID = 2;
  private byte __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.SERVER_TIMESTAMP, new org.apache.thrift.meta_data.FieldMetaData("serverTimestamp", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.NEW_VERSION_AVAILABLE, new org.apache.thrift.meta_data.FieldMetaData("newVersionAvailable", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.UPDATE_URL, new org.apache.thrift.meta_data.FieldMetaData("updateUrl", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.UPDATE_MESSAGE, new org.apache.thrift.meta_data.FieldMetaData("updateMessage", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SHOULD_CLEAN_CLIENT_DATA, new org.apache.thrift.meta_data.FieldMetaData("shouldCleanClientData", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ThriftPingResponse.class, metaDataMap);
  }

  public ThriftPingResponse() {
  }

  public ThriftPingResponse(
    long serverTimestamp,
    boolean newVersionAvailable,
    java.lang.String updateUrl,
    java.lang.String updateMessage,
    boolean shouldCleanClientData)
  {
    this();
    this.serverTimestamp = serverTimestamp;
    setServerTimestampIsSet(true);
    this.newVersionAvailable = newVersionAvailable;
    setNewVersionAvailableIsSet(true);
    this.updateUrl = updateUrl;
    this.updateMessage = updateMessage;
    this.shouldCleanClientData = shouldCleanClientData;
    setShouldCleanClientDataIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ThriftPingResponse(ThriftPingResponse other) {
    __isset_bitfield = other.__isset_bitfield;
    this.serverTimestamp = other.serverTimestamp;
    this.newVersionAvailable = other.newVersionAvailable;
    if (other.isSetUpdateUrl()) {
      this.updateUrl = other.updateUrl;
    }
    if (other.isSetUpdateMessage()) {
      this.updateMessage = other.updateMessage;
    }
    this.shouldCleanClientData = other.shouldCleanClientData;
  }

  public ThriftPingResponse deepCopy() {
    return new ThriftPingResponse(this);
  }

  @Override
  public void clear() {
    setServerTimestampIsSet(false);
    this.serverTimestamp = 0;
    setNewVersionAvailableIsSet(false);
    this.newVersionAvailable = false;
    this.updateUrl = null;
    this.updateMessage = null;
    setShouldCleanClientDataIsSet(false);
    this.shouldCleanClientData = false;
  }

  public long getServerTimestamp() {
    return this.serverTimestamp;
  }

  public ThriftPingResponse setServerTimestamp(long serverTimestamp) {
    this.serverTimestamp = serverTimestamp;
    setServerTimestampIsSet(true);
    return this;
  }

  public void unsetServerTimestamp() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SERVERTIMESTAMP_ISSET_ID);
  }

  /** Returns true if field serverTimestamp is set (has been assigned a value) and false otherwise */
  public boolean isSetServerTimestamp() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SERVERTIMESTAMP_ISSET_ID);
  }

  public void setServerTimestampIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SERVERTIMESTAMP_ISSET_ID, value);
  }

  public boolean isNewVersionAvailable() {
    return this.newVersionAvailable;
  }

  public ThriftPingResponse setNewVersionAvailable(boolean newVersionAvailable) {
    this.newVersionAvailable = newVersionAvailable;
    setNewVersionAvailableIsSet(true);
    return this;
  }

  public void unsetNewVersionAvailable() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __NEWVERSIONAVAILABLE_ISSET_ID);
  }

  /** Returns true if field newVersionAvailable is set (has been assigned a value) and false otherwise */
  public boolean isSetNewVersionAvailable() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __NEWVERSIONAVAILABLE_ISSET_ID);
  }

  public void setNewVersionAvailableIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __NEWVERSIONAVAILABLE_ISSET_ID, value);
  }

  public java.lang.String getUpdateUrl() {
    return this.updateUrl;
  }

  public ThriftPingResponse setUpdateUrl(java.lang.String updateUrl) {
    this.updateUrl = updateUrl;
    return this;
  }

  public void unsetUpdateUrl() {
    this.updateUrl = null;
  }

  /** Returns true if field updateUrl is set (has been assigned a value) and false otherwise */
  public boolean isSetUpdateUrl() {
    return this.updateUrl != null;
  }

  public void setUpdateUrlIsSet(boolean value) {
    if (!value) {
      this.updateUrl = null;
    }
  }

  public java.lang.String getUpdateMessage() {
    return this.updateMessage;
  }

  public ThriftPingResponse setUpdateMessage(java.lang.String updateMessage) {
    this.updateMessage = updateMessage;
    return this;
  }

  public void unsetUpdateMessage() {
    this.updateMessage = null;
  }

  /** Returns true if field updateMessage is set (has been assigned a value) and false otherwise */
  public boolean isSetUpdateMessage() {
    return this.updateMessage != null;
  }

  public void setUpdateMessageIsSet(boolean value) {
    if (!value) {
      this.updateMessage = null;
    }
  }

  public boolean isShouldCleanClientData() {
    return this.shouldCleanClientData;
  }

  public ThriftPingResponse setShouldCleanClientData(boolean shouldCleanClientData) {
    this.shouldCleanClientData = shouldCleanClientData;
    setShouldCleanClientDataIsSet(true);
    return this;
  }

  public void unsetShouldCleanClientData() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SHOULDCLEANCLIENTDATA_ISSET_ID);
  }

  /** Returns true if field shouldCleanClientData is set (has been assigned a value) and false otherwise */
  public boolean isSetShouldCleanClientData() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SHOULDCLEANCLIENTDATA_ISSET_ID);
  }

  public void setShouldCleanClientDataIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SHOULDCLEANCLIENTDATA_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
    case SERVER_TIMESTAMP:
      if (value == null) {
        unsetServerTimestamp();
      } else {
        setServerTimestamp((java.lang.Long)value);
      }
      break;

    case NEW_VERSION_AVAILABLE:
      if (value == null) {
        unsetNewVersionAvailable();
      } else {
        setNewVersionAvailable((java.lang.Boolean)value);
      }
      break;

    case UPDATE_URL:
      if (value == null) {
        unsetUpdateUrl();
      } else {
        setUpdateUrl((java.lang.String)value);
      }
      break;

    case UPDATE_MESSAGE:
      if (value == null) {
        unsetUpdateMessage();
      } else {
        setUpdateMessage((java.lang.String)value);
      }
      break;

    case SHOULD_CLEAN_CLIENT_DATA:
      if (value == null) {
        unsetShouldCleanClientData();
      } else {
        setShouldCleanClientData((java.lang.Boolean)value);
      }
      break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case SERVER_TIMESTAMP:
      return getServerTimestamp();

    case NEW_VERSION_AVAILABLE:
      return isNewVersionAvailable();

    case UPDATE_URL:
      return getUpdateUrl();

    case UPDATE_MESSAGE:
      return getUpdateMessage();

    case SHOULD_CLEAN_CLIENT_DATA:
      return isShouldCleanClientData();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case SERVER_TIMESTAMP:
      return isSetServerTimestamp();
    case NEW_VERSION_AVAILABLE:
      return isSetNewVersionAvailable();
    case UPDATE_URL:
      return isSetUpdateUrl();
    case UPDATE_MESSAGE:
      return isSetUpdateMessage();
    case SHOULD_CLEAN_CLIENT_DATA:
      return isSetShouldCleanClientData();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof ThriftPingResponse)
      return this.equals((ThriftPingResponse)that);
    return false;
  }

  public boolean equals(ThriftPingResponse that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_serverTimestamp = true;
    boolean that_present_serverTimestamp = true;
    if (this_present_serverTimestamp || that_present_serverTimestamp) {
      if (!(this_present_serverTimestamp && that_present_serverTimestamp))
        return false;
      if (this.serverTimestamp != that.serverTimestamp)
        return false;
    }

    boolean this_present_newVersionAvailable = true;
    boolean that_present_newVersionAvailable = true;
    if (this_present_newVersionAvailable || that_present_newVersionAvailable) {
      if (!(this_present_newVersionAvailable && that_present_newVersionAvailable))
        return false;
      if (this.newVersionAvailable != that.newVersionAvailable)
        return false;
    }

    boolean this_present_updateUrl = true && this.isSetUpdateUrl();
    boolean that_present_updateUrl = true && that.isSetUpdateUrl();
    if (this_present_updateUrl || that_present_updateUrl) {
      if (!(this_present_updateUrl && that_present_updateUrl))
        return false;
      if (!this.updateUrl.equals(that.updateUrl))
        return false;
    }

    boolean this_present_updateMessage = true && this.isSetUpdateMessage();
    boolean that_present_updateMessage = true && that.isSetUpdateMessage();
    if (this_present_updateMessage || that_present_updateMessage) {
      if (!(this_present_updateMessage && that_present_updateMessage))
        return false;
      if (!this.updateMessage.equals(that.updateMessage))
        return false;
    }

    boolean this_present_shouldCleanClientData = true;
    boolean that_present_shouldCleanClientData = true;
    if (this_present_shouldCleanClientData || that_present_shouldCleanClientData) {
      if (!(this_present_shouldCleanClientData && that_present_shouldCleanClientData))
        return false;
      if (this.shouldCleanClientData != that.shouldCleanClientData)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(serverTimestamp);

    hashCode = hashCode * 8191 + ((newVersionAvailable) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((isSetUpdateUrl()) ? 131071 : 524287);
    if (isSetUpdateUrl())
      hashCode = hashCode * 8191 + updateUrl.hashCode();

    hashCode = hashCode * 8191 + ((isSetUpdateMessage()) ? 131071 : 524287);
    if (isSetUpdateMessage())
      hashCode = hashCode * 8191 + updateMessage.hashCode();

    hashCode = hashCode * 8191 + ((shouldCleanClientData) ? 131071 : 524287);

    return hashCode;
  }

  @Override
  public int compareTo(ThriftPingResponse other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetServerTimestamp()).compareTo(other.isSetServerTimestamp());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetServerTimestamp()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.serverTimestamp, other.serverTimestamp);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetNewVersionAvailable()).compareTo(other.isSetNewVersionAvailable());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNewVersionAvailable()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.newVersionAvailable, other.newVersionAvailable);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetUpdateUrl()).compareTo(other.isSetUpdateUrl());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUpdateUrl()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.updateUrl, other.updateUrl);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetUpdateMessage()).compareTo(other.isSetUpdateMessage());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUpdateMessage()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.updateMessage, other.updateMessage);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetShouldCleanClientData()).compareTo(other.isSetShouldCleanClientData());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetShouldCleanClientData()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.shouldCleanClientData, other.shouldCleanClientData);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("ThriftPingResponse(");
    boolean first = true;

    sb.append("serverTimestamp:");
    sb.append(this.serverTimestamp);
    first = false;
    if (!first) sb.append(", ");
    sb.append("newVersionAvailable:");
    sb.append(this.newVersionAvailable);
    first = false;
    if (!first) sb.append(", ");
    sb.append("updateUrl:");
    if (this.updateUrl == null) {
      sb.append("null");
    } else {
      sb.append(this.updateUrl);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("updateMessage:");
    if (this.updateMessage == null) {
      sb.append("null");
    } else {
      sb.append(this.updateMessage);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("shouldCleanClientData:");
    sb.append(this.shouldCleanClientData);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ThriftPingResponseStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public ThriftPingResponseStandardScheme getScheme() {
      return new ThriftPingResponseStandardScheme();
    }
  }

  private static class ThriftPingResponseStandardScheme extends org.apache.thrift.scheme.StandardScheme<ThriftPingResponse> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ThriftPingResponse struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // SERVER_TIMESTAMP
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.serverTimestamp = iprot.readI64();
              struct.setServerTimestampIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // NEW_VERSION_AVAILABLE
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.newVersionAvailable = iprot.readBool();
              struct.setNewVersionAvailableIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // UPDATE_URL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.updateUrl = iprot.readString();
              struct.setUpdateUrlIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // UPDATE_MESSAGE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.updateMessage = iprot.readString();
              struct.setUpdateMessageIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // SHOULD_CLEAN_CLIENT_DATA
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.shouldCleanClientData = iprot.readBool();
              struct.setShouldCleanClientDataIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ThriftPingResponse struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(SERVER_TIMESTAMP_FIELD_DESC);
      oprot.writeI64(struct.serverTimestamp);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(NEW_VERSION_AVAILABLE_FIELD_DESC);
      oprot.writeBool(struct.newVersionAvailable);
      oprot.writeFieldEnd();
      if (struct.updateUrl != null) {
        oprot.writeFieldBegin(UPDATE_URL_FIELD_DESC);
        oprot.writeString(struct.updateUrl);
        oprot.writeFieldEnd();
      }
      if (struct.updateMessage != null) {
        oprot.writeFieldBegin(UPDATE_MESSAGE_FIELD_DESC);
        oprot.writeString(struct.updateMessage);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(SHOULD_CLEAN_CLIENT_DATA_FIELD_DESC);
      oprot.writeBool(struct.shouldCleanClientData);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ThriftPingResponseTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public ThriftPingResponseTupleScheme getScheme() {
      return new ThriftPingResponseTupleScheme();
    }
  }

  private static class ThriftPingResponseTupleScheme extends org.apache.thrift.scheme.TupleScheme<ThriftPingResponse> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ThriftPingResponse struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetServerTimestamp()) {
        optionals.set(0);
      }
      if (struct.isSetNewVersionAvailable()) {
        optionals.set(1);
      }
      if (struct.isSetUpdateUrl()) {
        optionals.set(2);
      }
      if (struct.isSetUpdateMessage()) {
        optionals.set(3);
      }
      if (struct.isSetShouldCleanClientData()) {
        optionals.set(4);
      }
      oprot.writeBitSet(optionals, 5);
      if (struct.isSetServerTimestamp()) {
        oprot.writeI64(struct.serverTimestamp);
      }
      if (struct.isSetNewVersionAvailable()) {
        oprot.writeBool(struct.newVersionAvailable);
      }
      if (struct.isSetUpdateUrl()) {
        oprot.writeString(struct.updateUrl);
      }
      if (struct.isSetUpdateMessage()) {
        oprot.writeString(struct.updateMessage);
      }
      if (struct.isSetShouldCleanClientData()) {
        oprot.writeBool(struct.shouldCleanClientData);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ThriftPingResponse struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(5);
      if (incoming.get(0)) {
        struct.serverTimestamp = iprot.readI64();
        struct.setServerTimestampIsSet(true);
      }
      if (incoming.get(1)) {
        struct.newVersionAvailable = iprot.readBool();
        struct.setNewVersionAvailableIsSet(true);
      }
      if (incoming.get(2)) {
        struct.updateUrl = iprot.readString();
        struct.setUpdateUrlIsSet(true);
      }
      if (incoming.get(3)) {
        struct.updateMessage = iprot.readString();
        struct.setUpdateMessageIsSet(true);
      }
      if (incoming.get(4)) {
        struct.shouldCleanClientData = iprot.readBool();
        struct.setShouldCleanClientDataIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

