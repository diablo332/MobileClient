/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package kz.pnhz.mobile.thrift.generated;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.10.0)", date = "2017-10-15")
public class ThriftDataLocale implements org.apache.thrift.TBase<ThriftDataLocale, ThriftDataLocale._Fields>, java.io.Serializable, Cloneable, Comparable<ThriftDataLocale> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ThriftDataLocale");

  private static final org.apache.thrift.protocol.TField LOCALE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("localeId", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField DISPLAY_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("displayName", org.apache.thrift.protocol.TType.MAP, (short)2);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new ThriftDataLocaleStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new ThriftDataLocaleTupleSchemeFactory();

  public java.lang.String localeId; // required
  public java.util.Map<java.lang.String,java.lang.String> displayName; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    LOCALE_ID((short)1, "localeId"),
    DISPLAY_NAME((short)2, "displayName");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // LOCALE_ID
          return LOCALE_ID;
        case 2: // DISPLAY_NAME
          return DISPLAY_NAME;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.LOCALE_ID, new org.apache.thrift.meta_data.FieldMetaData("localeId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DISPLAY_NAME, new org.apache.thrift.meta_data.FieldMetaData("displayName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ThriftDataLocale.class, metaDataMap);
  }

  public ThriftDataLocale() {
  }

  public ThriftDataLocale(
    java.lang.String localeId,
    java.util.Map<java.lang.String,java.lang.String> displayName)
  {
    this();
    this.localeId = localeId;
    this.displayName = displayName;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ThriftDataLocale(ThriftDataLocale other) {
    if (other.isSetLocaleId()) {
      this.localeId = other.localeId;
    }
    if (other.isSetDisplayName()) {
      java.util.Map<java.lang.String,java.lang.String> __this__displayName = new java.util.HashMap<java.lang.String,java.lang.String>(other.displayName);
      this.displayName = __this__displayName;
    }
  }

  public ThriftDataLocale deepCopy() {
    return new ThriftDataLocale(this);
  }

  @Override
  public void clear() {
    this.localeId = null;
    this.displayName = null;
  }

  public java.lang.String getLocaleId() {
    return this.localeId;
  }

  public ThriftDataLocale setLocaleId(java.lang.String localeId) {
    this.localeId = localeId;
    return this;
  }

  public void unsetLocaleId() {
    this.localeId = null;
  }

  /** Returns true if field localeId is set (has been assigned a value) and false otherwise */
  public boolean isSetLocaleId() {
    return this.localeId != null;
  }

  public void setLocaleIdIsSet(boolean value) {
    if (!value) {
      this.localeId = null;
    }
  }

  public int getDisplayNameSize() {
    return (this.displayName == null) ? 0 : this.displayName.size();
  }

  public void putToDisplayName(java.lang.String key, java.lang.String val) {
    if (this.displayName == null) {
      this.displayName = new java.util.HashMap<java.lang.String,java.lang.String>();
    }
    this.displayName.put(key, val);
  }

  public java.util.Map<java.lang.String,java.lang.String> getDisplayName() {
    return this.displayName;
  }

  public ThriftDataLocale setDisplayName(java.util.Map<java.lang.String,java.lang.String> displayName) {
    this.displayName = displayName;
    return this;
  }

  public void unsetDisplayName() {
    this.displayName = null;
  }

  /** Returns true if field displayName is set (has been assigned a value) and false otherwise */
  public boolean isSetDisplayName() {
    return this.displayName != null;
  }

  public void setDisplayNameIsSet(boolean value) {
    if (!value) {
      this.displayName = null;
    }
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
    case LOCALE_ID:
      if (value == null) {
        unsetLocaleId();
      } else {
        setLocaleId((java.lang.String)value);
      }
      break;

    case DISPLAY_NAME:
      if (value == null) {
        unsetDisplayName();
      } else {
        setDisplayName((java.util.Map<java.lang.String,java.lang.String>)value);
      }
      break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case LOCALE_ID:
      return getLocaleId();

    case DISPLAY_NAME:
      return getDisplayName();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case LOCALE_ID:
      return isSetLocaleId();
    case DISPLAY_NAME:
      return isSetDisplayName();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof ThriftDataLocale)
      return this.equals((ThriftDataLocale)that);
    return false;
  }

  public boolean equals(ThriftDataLocale that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_localeId = true && this.isSetLocaleId();
    boolean that_present_localeId = true && that.isSetLocaleId();
    if (this_present_localeId || that_present_localeId) {
      if (!(this_present_localeId && that_present_localeId))
        return false;
      if (!this.localeId.equals(that.localeId))
        return false;
    }

    boolean this_present_displayName = true && this.isSetDisplayName();
    boolean that_present_displayName = true && that.isSetDisplayName();
    if (this_present_displayName || that_present_displayName) {
      if (!(this_present_displayName && that_present_displayName))
        return false;
      if (!this.displayName.equals(that.displayName))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetLocaleId()) ? 131071 : 524287);
    if (isSetLocaleId())
      hashCode = hashCode * 8191 + localeId.hashCode();

    hashCode = hashCode * 8191 + ((isSetDisplayName()) ? 131071 : 524287);
    if (isSetDisplayName())
      hashCode = hashCode * 8191 + displayName.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(ThriftDataLocale other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetLocaleId()).compareTo(other.isSetLocaleId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLocaleId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.localeId, other.localeId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetDisplayName()).compareTo(other.isSetDisplayName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDisplayName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.displayName, other.displayName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("ThriftDataLocale(");
    boolean first = true;

    sb.append("localeId:");
    if (this.localeId == null) {
      sb.append("null");
    } else {
      sb.append(this.localeId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("displayName:");
    if (this.displayName == null) {
      sb.append("null");
    } else {
      sb.append(this.displayName);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ThriftDataLocaleStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public ThriftDataLocaleStandardScheme getScheme() {
      return new ThriftDataLocaleStandardScheme();
    }
  }

  private static class ThriftDataLocaleStandardScheme extends org.apache.thrift.scheme.StandardScheme<ThriftDataLocale> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ThriftDataLocale struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // LOCALE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.localeId = iprot.readString();
              struct.setLocaleIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // DISPLAY_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map0 = iprot.readMapBegin();
                struct.displayName = new java.util.HashMap<java.lang.String,java.lang.String>(2*_map0.size);
                java.lang.String _key1;
                java.lang.String _val2;
                for (int _i3 = 0; _i3 < _map0.size; ++_i3)
                {
                  _key1 = iprot.readString();
                  _val2 = iprot.readString();
                  struct.displayName.put(_key1, _val2);
                }
                iprot.readMapEnd();
              }
              struct.setDisplayNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ThriftDataLocale struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.localeId != null) {
        oprot.writeFieldBegin(LOCALE_ID_FIELD_DESC);
        oprot.writeString(struct.localeId);
        oprot.writeFieldEnd();
      }
      if (struct.displayName != null) {
        oprot.writeFieldBegin(DISPLAY_NAME_FIELD_DESC);
        {
          oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.displayName.size()));
          for (java.util.Map.Entry<java.lang.String, java.lang.String> _iter4 : struct.displayName.entrySet())
          {
            oprot.writeString(_iter4.getKey());
            oprot.writeString(_iter4.getValue());
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ThriftDataLocaleTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public ThriftDataLocaleTupleScheme getScheme() {
      return new ThriftDataLocaleTupleScheme();
    }
  }

  private static class ThriftDataLocaleTupleScheme extends org.apache.thrift.scheme.TupleScheme<ThriftDataLocale> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ThriftDataLocale struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetLocaleId()) {
        optionals.set(0);
      }
      if (struct.isSetDisplayName()) {
        optionals.set(1);
      }
      oprot.writeBitSet(optionals, 2);
      if (struct.isSetLocaleId()) {
        oprot.writeString(struct.localeId);
      }
      if (struct.isSetDisplayName()) {
        {
          oprot.writeI32(struct.displayName.size());
          for (java.util.Map.Entry<java.lang.String, java.lang.String> _iter5 : struct.displayName.entrySet())
          {
            oprot.writeString(_iter5.getKey());
            oprot.writeString(_iter5.getValue());
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ThriftDataLocale struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(2);
      if (incoming.get(0)) {
        struct.localeId = iprot.readString();
        struct.setLocaleIdIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TMap _map6 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.displayName = new java.util.HashMap<java.lang.String,java.lang.String>(2*_map6.size);
          java.lang.String _key7;
          java.lang.String _val8;
          for (int _i9 = 0; _i9 < _map6.size; ++_i9)
          {
            _key7 = iprot.readString();
            _val8 = iprot.readString();
            struct.displayName.put(_key7, _val8);
          }
        }
        struct.setDisplayNameIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

